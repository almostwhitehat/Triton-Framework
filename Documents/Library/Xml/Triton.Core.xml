<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Triton.Core</name>
    </assembly>
    <members>
        <member name="T:Triton.Logging.FileLogHandler">
            <summary>
            Defines an LogHandler object that is used to write to a file.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Logging.LogHandler">
            <summary>
            Specifies the contract that all LogHandler objects need to follow
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Logging.LogHandler.#ctor">
            <summary>
            Constructor.
            </summary>
            <returns><c>LogHandler</c> object</returns>
        </member>
        <member name="M:Triton.Logging.LogHandler.#ctor(Triton.Logging.MessageLevel)">
            <summary>
            Constructor.
            </summary>
            <param name="level"><c>MessageLevel</c> of handler.</param>
            <returns><c>LogHandler</c> object</returns>
        </member>
        <member name="M:Triton.Logging.LogHandler.Publish(Triton.Logging.LogMessage)">
            <summary>
            Pushes the message info to a data source/buffer
            </summary>
            <param name="message"><c>LogMessage</c> that is to be sent to the data source/buffer</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.LogHandler.Flush">
            <summary>
            Flushes buffered messages to the data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.LogHandler.Close">
            <summary>
            Closes the data source
            </summary>
            <returns></returns>
        </member>
        <member name="P:Triton.Logging.LogHandler.Level">
            <summary>
            Level property.
            </summary>
            <remarks>Gets/Sets the level of the handler.</remarks>
            <returns><c>MessageLevel</c> of handler</returns>
        </member>
        <member name="M:Triton.Logging.FileLogHandler.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>Call the base constructor.</remarks>
            <returns><c>FileLogHandler</c> object</returns>
        </member>
        <member name="M:Triton.Logging.FileLogHandler.#ctor(Triton.Logging.MessageLevel)">
            <summary>
            Constructor.
            </summary>
            <remarks>Call the base constructor.</remarks>
            <param name="level"><c>MessageLevel</c> of <c>LogHandler</c>.</param>
            <returns><c>FileLogHandler</c> object</returns>
        </member>
        <member name="M:Triton.Logging.FileLogHandler.Finalize">
            <summary>
            Deconstructor calls the local Close() method to clean up the TextWriter stream.
            </summary>
        </member>
        <member name="M:Triton.Logging.FileLogHandler.Publish(Triton.Logging.LogMessage)">
            <summary>
            Pushes the message info to a file/buffer
            </summary>
            <param name="message"><c>LogMessage</c> that is to be sent to the data source/buffer</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.FileLogHandler.Flush">
            <summary>
            Flushes buffered messages to the file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.FileLogHandler.Close">
            <summary>
            Closes the file
            </summary>
            <returns></returns>
        </member>
        <member name="P:Triton.Logging.FileLogHandler.FileName">
            <summary>
            FileName property.
            </summary>
            <remarks>Sets the filename used to publish to.</remarks>
            <param name="value"><c>String</c> of filename.</param>
            <returns></returns>
        </member>
        <member name="T:Triton.Controller.XmlActionMap">
            <summary>
            Singleton to maintain the mappings for XML Actions.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Utilities.Configuration.XmlConfiguration.GetConfig(System.String,System.String)">
            <summary>
            Returns an <c>XmlConfiguration</c> object containing the child nodes specified by the input parameters
            </summary>
            <remarks>
            <P>This method looks under the current node context for a node named <c>section</c>. If found,
            it then looks for any child elements that contain a node with an attribute called <c>name</c> that
            have a value as defined by the <c>name</c> parameter. If found, then the <c>section</c> node
            is returned. If either the <c>section</c> node or the subnode with the <c>name</c> attribute
            value are not found, <c>Null</c> is returned</P>
            <P><B>Note:</B> if multiple matches are possible in the XML, only the first match is returned.</P></remarks>
            <param name="section"><c>String</c> that specifies the XML node name to search</param>
            <param name="name"><c>String</c> that specifies the value of the name attribute to match</param>
            <returns><c>XmlConfiguration</c> object with the identified XML node as the root node, or <c>Null</c>
            if not found</returns>
        </member>
        <member name="M:Triton.Utilities.Configuration.XmlConfiguration.GetValue(System.String)">
            <summary>
            Returns the value of the specified XML node, or <c>Null</c> if the node is not found
            </summary>
            <remarks>If the xpath is not properly formed, a null string is returned</remarks>
            <param name="xpath"><c>Xpath</c> that specifies the XML node to retrieve</param>
            <returns><c>String</c> that contains the value of the XML tag requested</returns>
        </member>
        <member name="M:Triton.Utilities.Configuration.XmlConfiguration.GetAttributes(System.String)">
            <summary>
            Returns all attributes from a specified <c>xpath</c>
            </summary>
            <remarks>The atributes are returned in a <c>NameValueCollection</c> object, one entry for each
            attribute.</remarks>
            <param name="xpath"><c>Xpath</c> that specifies the XML node to retrieve the attributes from</param>
            <returns><c>NameValueCollection</c> containing the name/value pairs of the attributes</returns>
        </member>
        <member name="M:Triton.Controller.XmlActionMap.#ctor">
            <summary>
            Default constructor.  Private to enforce singleton implementation.
            </summary>
        </member>
        <member name="M:Triton.Controller.XmlActionMap.GetInstance">
            <summary>
            Returns the global (singleton) <c>XmlActionMap</c> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Triton.Controller.StateMachine.StateFactory">
            <summary>
            Factory class to instantiate State objects.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.StateMachine.StateFactory.MakeState(System.String,System.Int64,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new State instance for the specified type.
            </summary>
            <remarks>
            State prerequisite are included in the <c>attributes</c> collection with the
            attribute name of "prerequisite" and a value in the form of
            [{name}=]{start_state_id},{start_event}|[{name}=]{start_state_id},{start_event}|...
            where {name} is the name of the (optional) name of the prerequisite, {start_state_id}
            is the ID of the start state for the prerequisite flow and {start_event} is the
            event from the start state to follow. {name} is optional. With no name the value
            would look like: {start_state_id},{start_event}|{start_state_id},{start_event}|...
            </remarks>
            <param name="stateType">The type of State to make.</param>
            <param name="id">The state ID for the state.</param>
            <param name="attributes">A <b>NameValueCollection</b> containing the attributes
            		for the state.</param>
            <returns>A new instance of a State of the specified type.</returns>
        </member>
        <member name="T:Triton.Controller.SimpleContentProvider">
            <summary>
            <b>SimpleContentProvider</b> is an empty <b>ContentProvider</b> that performs no
            formatting/rendering of results received in the context.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.ContentProvider">
            <summary>
            Defines the contract that the framework implements to obtain content to return to
            the client in response to an incoming request.
            </summary>
            <remarks>
            The <b>ContentProvider</b> interface is implemented to provide the framework with
            content for a specific type of request.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.ContentProvider.Init(Triton.Controller.TransitionContext)">
            <summary>
            Performs initialization tasks for the provider.
            </summary>
            <param name="context">The <b>TransitionContext</b> the provider is for.</param>
        </member>
        <member name="M:Triton.Controller.ContentProvider.GetPublisher">
            <summary>
            Gets a <b>Publisher</b> for the provider.
            </summary>
            <returns>A <b>Publisher</b> for publishing content.</returns>
        </member>
        <member name="M:Triton.Controller.ContentProvider.GetPublishedContent(Triton.Controller.TransitionContext)">
            <summary>
            Gets the published content to fulfill the given context's request.
            </summary>
            <param name="context">The <b>TransitionContext</b> to get the published content for.</param>
            <returns>A <b>string</b> containing the content to be returned to the client.</returns>
        </member>
        <member name="M:Triton.Controller.ContentProvider.RenderContent(Triton.Controller.TransitionContext)">
            <summary>
            Renders the content to be returned to the client.
            </summary>
            <param name="context">The context of the request the content is being rendered for.</param>
            <returns>A <b>string</b> containing the content to be returned to the client.</returns>
        </member>
        <member name="M:Triton.Controller.ContentProvider.RenderPublishContent(Triton.Controller.TransitionContext)">
            <summary>
            Renders the content to be published.
            </summary>
            <param name="context">The context of the request the content is being rendered for.</param>
            <returns>A <b>string</b> containing the content to be published.</returns>
        </member>
        <member name="M:Triton.Controller.SimpleContentProvider.Init(Triton.Controller.TransitionContext)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="context">The <b>TransitionContext</b> the provider is for.</param>
        </member>
        <member name="M:Triton.Controller.SimpleContentProvider.GetPublisher">
            <summary>
            Gets a <b>Publisher</b> for the provider.
            </summary>
            <returns>A <b>Publisher</b> for publishing HTML content.</returns>
            <remarks>
            Not yet implemented for SimpleContentProvider.
            </remarks>
        </member>
        <member name="M:Triton.Controller.SimpleContentProvider.GetPublishedContent(Triton.Controller.TransitionContext)">
            <summary>
            Gets the published content to fulfill the given context's request.
            </summary>
            <param name="context">The <b>TransitionContext</b> to get the published content for.</param>
            <returns>A <b>string</b> containing the content to be returned to the client.</returns>
            <remarks>
            Not yet implemented for SimpleContentProvider.
            </remarks>
        </member>
        <member name="M:Triton.Controller.SimpleContentProvider.ShouldBePublished(Triton.Controller.TransitionContext)">
            <summary>
            Determines if the content fulfilling the given context's request should be published.
            </summary>
            <param name="context">The context of the request the content is for.</param>
            <returns><b>True</b> if the content should be published, <b>false</b> if not.</returns>
            <remarks>
            Not yet implemented for SimpleContentProvider.
            </remarks>
        </member>
        <member name="M:Triton.Controller.SimpleContentProvider.RenderContent(Triton.Controller.TransitionContext)">
            <summary>
            For SimpleContentProvider, this does nothing.
            </summary>
            <param name="context">The context of the request the content is being rendered for.</param>
            <returns>null.</returns>
        </member>
        <member name="M:Triton.Controller.SimpleContentProvider.RenderPublishContent(Triton.Controller.TransitionContext)">
            <summary>
            Renders the content to be published.
            </summary>
            <param name="context">The context of the request the content is being rendered for.</param>
            <returns>A <b>string</b> containing the content to be published.</returns>
            <remarks>
            Not yet implemented for SimpleContentProvider.
            </remarks>
        </member>
        <member name="M:Triton.Controller.SimpleContentProvider.Dispose">
            <summary>
            Frees resources used by the <b>HtmlContentProvider</b>.
            </summary>
        </member>
        <member name="T:Triton.Controller.Request.MvcCoreRequest">
            <summary>
            <b>MvcCoreRequest</b> implements the <b>MvcRequest</b> interface for
            non-web related applications.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.Request.MvcRequest">
            <summary>
            <b>MvcRequest</b> is the interface to be implemented for any type of request
            handled by the <b>Controller</b>.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Request.MvcRequest.GetItem``1(System.Object)">
            <summary>
             Retrieves the specific Type of object from the Items Dictionary.
            </summary>
            <param name="key">Object key.</param>
            <typeparam name="T">Type of object to return.</typeparam>
            <returns>The corresponding key value.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcRequest.GetCookie(System.String)">
            <summary>
            Returns a <b>MvcCookie</b> from the request with the given name, 
            or null if no cookie with that name exists.
            </summary>
            <param name="name">The name of the cookie to get.</param>
            <returns>A <b>MvcCookie</b> with the given name, or null if no 
            	cookie with that name exists.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcRequest.GetResponseCookie(System.String)">
            <summary>
            Returns a <b>MvcCookie</b> from the response with the given name, 
            or null if no cookie with that name exists.
            </summary>
            <param name="name">The name of the response cookie to get.</param>
            <returns>A <b>MvcCookie</b> with the given name, or null if no 
            	cookie with that name exists in the response.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcRequest.SetResponseCookie(Triton.Controller.Request.MvcCookie)">
            <summary>
            Sets a <b>MvcCookie</b> in the response.  If the cookie already
            exists, its information is updated, if not, it is created.
            </summary>
            <param name="cookie">The <b>MvcCookie</b> to set in the response.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcRequest.WriteResponse(System.String,System.Boolean)">
            <summary>
            Writes the given content to the request's response.
            </summary>
            <param name="content">The content to write to the response.</param>
            <param name="endResponse"><b>True</b> if the response is to be ended,
            	<b>false</b> if not.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcRequest.Execute(System.String)">
            <summary>
            Executes the given URL and returns the content returned by the URL.
            </summary>
            <param name="url">The URL to execute.</param>
            <returns>The content returned from the given URL.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcRequest.Transfer(System.String)">
            <summary>
            Transfers processing of the request to the given URL.
            </summary>
            <param name="url">The URL to transfer processing to.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcRequest.Redirect(System.String)">
            <summary>
            Redirects a client to a new URL and specifies the new URL.
            </summary>
            <param name="url">The target location.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcRequest.ValidateInput">
            <summary>
            Validates data submitted by a client and raises an exception 
            if potentially dangerous data is present.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcRequest.Item(System.String)">
            <summary>
            Indexer for a <b>MvcRequest</b>.  Gets or Sets the parameter 
            with the given name.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcRequest.Params">
            <summary>
            Gets a collection of the parameters of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcRequest.Items">
            <summary>
            Gets a collection of objects used internally for the processing of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcRequest.Version">
            <summary>
            Gets the version of the target "page" for rendering the response.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcRequest.IP">
            <summary>
            Gets the IP address of the origin of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcRequest.UserName">
            <summary>
            Gets the logon user of the client request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcRequest.Files">
            <summary>
            Gets the collection of client-uploaded files.
            </summary>
        </member>
        <member name="F:Triton.Controller.Request.MvcCoreRequest.ip">
            <summary>
            The IP address of the machine the request originated from.
            </summary>
        </member>
        <member name="F:Triton.Controller.Request.MvcCoreRequest.items">
            <summary>
            A key/value collection that can be used to organize and share data between the
            business layer and presentation layer.
            </summary>
        </member>
        <member name="F:Triton.Controller.Request.MvcCoreRequest.parameters">
            <summary>
            The collection of request parameters.
            </summary>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.GetItem``1(System.Object)">
            <summary>
             Retrieves the specific Type of object from the Items Dictionary.
            </summary>
            <param name="key">Object key.</param>
            <typeparam name="T">Type of object to return.</typeparam>
            <returns>The corresponding key value.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.GetCookie(System.String)">
            <summary>
            Returns a <b>MvcCookie</b> from the request with the given name, 
            or null if no cookie with that name exists.
            </summary>
            <param name="name">The name of the cookie to get.</param>
            <returns>A <b>MvcCookie</b> with the given name, or null if no 
            	cookie with that name exists.</returns>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.GetResponseCookie(System.String)">
            <summary>
            Returns a <b>MvcCookie</b> from the response with the given name, 
            or null if no cookie with that name exists.
            </summary>
            <param name="name">The name of the response cookie to get.</param>
            <returns>A <b>MvcCookie</b> with the given name, or null if no 
            	cookie with that name exists in the response.</returns>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.SetResponseCookie(Triton.Controller.Request.MvcCookie)">
            <summary>
            Sets a <b>MvcCookie</b> in the response.  If the cookie already
            exists, its information is updated, if not, it is created.
            </summary>
            <param name="cookie">The <b>MvcCookie</b> to set in the response.</param>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.WriteResponse(System.String,System.Boolean)">
            <summary>
            Writes the given content to the request's response.
            </summary>
            <param name="content">The content to write to the response.</param>
            <param name="endResponse"><b>True</b> if the response is to be ended,
            	<b>false</b> if not.</param>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.Execute(System.String)">
            <summary>
            Executes the given URL and returns the content returned by the URL.
            </summary>
            <param name="url">The URL to execute.</param>
            <returns>The content returned from the given URL.</returns>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.Transfer(System.String)">
            <summary>
            Transfers processing of the request to the given URL.
            </summary>
            <param name="url">The URL to transfer processing to.</param>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.Redirect(System.String)">
            <summary>
            Redirects a client to a new URL and specifies the new URL.
            </summary>
            <param name="url">The target location.</param>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="M:Triton.Controller.Request.MvcCoreRequest.ValidateInput">
            <summary>
            Validates data submitted by a client and raises an exception 
            if potentially dangerous data is present.
            </summary>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="P:Triton.Controller.Request.MvcCoreRequest.Item(System.String)">
            <summary>
            Indexer for a <b>MvcRequest</b>.  Gets or Sets the parameter 
            with the given name.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCoreRequest.Params">
            <summary>
            Gets a collection of the parameters of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCoreRequest.Items">
            <summary>
            Gets a key/value collection that can be used to organize and share data between the
            business layer and presentation layer.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCoreRequest.Version">
            <summary>
            Gets the version of the target "page" for rendering the response.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCoreRequest.IP">
            <summary>
            Gets the IP address of the origin of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCoreRequest.UserName">
            <summary>
            Gets the logon user of the client request.
            </summary>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="P:Triton.Controller.Request.MvcCoreRequest.Files">
            <summary>
            Gets the collection of client-uploaded files.
            </summary>
            <remarks>
            Unimplemented for MvcCoreRequest.
            </remarks>
        </member>
        <member name="T:Triton.Controller.Publish.IContentPublisher">
            <summary>
            Defines the contract that the framework implements to obtain content to return to
            the client in response to an incoming request.
            </summary>
            <remarks>
            The <b>ContentProvider</b> interface is implemented to provide the framework with
            content for a specific type of request.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Publish.IContentPublisher.Publish(System.Object,Triton.Controller.TransitionContext,Triton.Controller.Publish.Publisher)">
            <summary>
            Publishes the given content.
            </summary>
            <param name="publishParam">An object containing the content to be published.
            		The type of this object is determined by the associated <b>ContentProvider</b>.</param>
            <param name="context">The request context the content is being published for.</param>
            <param name="publisher">The <b>Publisher</b> that is calling this <b>ContentPublisher</b>.</param>
            <returns>A string containing the content to return to the client in the response.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.IContentPublisher.GetPublishKey(Triton.Controller.TransitionContext)">
            <summary>
            Gets the unique publish key for the given context.
            </summary>
            <param name="context">The context to get a publish key for.</param>
            <returns>A published key unique to the request in the given context.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.IContentPublisher.ShouldBePublished(Triton.Controller.TransitionContext)">
            <summary>
            Determines if the content fulfilling the given context's request should be published.
            </summary>
            <param name="context">The context of the request the content is for.</param>
            <returns><b>True</b> if the content should be published, <b>false</b> if not.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.IContentPublisher.IsExpired(Triton.Controller.Publish.PublishRecord)">
            <summary>
            Determines if the published content identified by the given <b>PublishRecord</b>
            is expired.
            </summary>
            <param name="publishRecord">The PublishRecord to determine the expiration status of.</param>
            <returns><b>True</b> if the referenced content is expired, <b>false</b> if not.</returns>
        </member>
        <member name="P:Triton.Controller.Publish.IContentPublisher.Name">
            <summary>
            Gets the name of the <b>ContentPublisher</b>.
            </summary>
        </member>
        <member name="P:Triton.Controller.Publish.IContentPublisher.HasRules">
            <summary>
            Gets the flag indicating whether or not the content publisher has any rules
            associated with it.
            </summary>
        </member>
        <member name="P:Triton.Controller.Publish.IContentPublisher.Rules">
            <summary>
            Gets or sets the list of <c>IPublisherRule</c> associated with the content publisher.
            </summary>
        </member>
        <member name="T:Triton.Controller.Format.Formatter">
            <summary>
            <c>Formatter</c> in an interface that defines a formatter for transforming
            a list of TransferObjects into a different format, for example, XML.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Format.Formatter.Format(System.Object)">
            <summary>
            Transforms the data in the given object to the desired format.
            </summary>
            <param name="obj">The object containing the data to format.</param>
            <returns>An object containing the formatted data of the <c>SearchResult</c>.</returns>
        </member>
        <member name="M:Triton.Controller.Format.Formatter.GetSupportedTypes">
            <summary>
            Returns a list of Types supported by the Formatter.
            </summary>
            <returns>An array of <c>Type</c>s of TransferObjects that the 
            		Formatter supports.</returns>
        </member>
        <member name="P:Triton.Controller.Format.Formatter.Request">
            <summary>
            Gets the <b>MvcRequest</b> the Formatter is called for.
            </summary>
        </member>
        <member name="T:Triton.Controller.Command.RedirectingCommand">
            <summary>
            <c>RedirectingCommand</c> is an abstract class that any command that requires
            a redirect to a target page can inherit from.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.Command.Command">
            <summary>
            The Command interface defines the API for a command used by the 
            FrontController.  A Command contains a specific unit of business
            logic.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Command.Command.Execute(Triton.Controller.Request.MvcRequest)">
            <summary>
            Carries out the actions required to execute the command.
            </summary>
            <param name="request">The <c>MvcRequest</c> request
            		that triggered the command to be executed.</param>
        </member>
        <member name="M:Triton.Controller.Command.RedirectingCommand.Execute(Triton.Controller.Request.MvcRequest)">
            <summary>
            Calls the sub class's <c>OnExecute</c> method to perform the desired
            action, then transfers control to the target page for rendering.
            </summary>
            <param name="request">The <c>MvcRequest</c> the command is being
            		executed for.</param>
        </member>
        <member name="M:Triton.Controller.Command.RedirectingCommand.OnExecute(Triton.Controller.Request.MvcRequest)">
            <summary>
            Carries out the actions taken by the command.
            Classes that inherit from RedirectingCommand must implement
            this method.
            </summary>
            <param name="request">The <c>MvcRequest</c> the command is being
            		executed for.</param>
        </member>
        <member name="M:Triton.Controller.Command.RedirectingCommand.Init(Triton.Controller.Request.MvcRequest)">
            <summary>
            <b>Init</b> gets called before <b>OnExecute</b> to perform any initialization
            tasks required before the command is executed.  By default <b>Init</b> does nothing.
            Subclasses can provide an implementation for this method.
            </summary>
            <param name="request">The <b>MvcRequest</b> the command is being initialized for.</param> 
        </member>
        <member name="M:Triton.Controller.Command.RedirectingCommand.Transfer(Triton.Controller.Request.MvcRequest)">
            <summary>
            Transfer control to the target page of the request for rendering of the results.
            </summary>
            <param name="request">The <c>MvcRequest</c> the transfer is being
            		executed for.</param>
        </member>
        <member name="M:Triton.Controller.Command.RedirectingCommand.GetTargetPage(Triton.Controller.Request.MvcRequest)">
            <summary>
            Gets the name of the target page for the command.
            </summary>
            <param name="request">The <c>MvcRequest</c> the command is being
            		executed for.</param>
            <returns>The name of the target page for the command.</returns>
        </member>
        <member name="M:Triton.Controller.Command.RedirectingCommand.GetRedirectUrl(Triton.Controller.Request.MvcRequest)">
            <summary>
            Returns the URL of the target page to render the results of the command.
            This is used by the <c>Execute</c> method to determine where to redirect to.
            This method can be overridden to change the default implementation for
            finding the target page.
            </summary>
            <param name="request">The <c>MvcRequest</c> the command is being
            		executed for.</param>
            <returns>The URL of the target page for the command.</returns>
        </member>
        <member name="M:Triton.Controller.Command.RedirectingCommand.GetXmlPath(Triton.Controller.Request.MvcRequest)">
            <summary>
            Returns the path to the XML file containing the content for the target page.
            This mehotd is used by the <c>Execute</c> method to determine the location
            of the XML content file for the target page.  If an inherited class
            overrides <c>GetRedirectUrl</c>, it should also override this method
            to provide a path to the corresponding content file.
            This method can be overridden to change the default implementation for
            finding the XML content file for the target page.
            </summary>
            <param name="request">The <c>MvcRequest</c> the command is being
            		executed for.</param>
            <returns>The path of the target page's XML content file, relative to the
            		application root directory.</returns>
        </member>
        <member name="P:Triton.Controller.Command.RedirectingCommand.DoRedirect">
            <summary>
            
            </summary>
            <remarks>change to internal for 2.0</remarks>
        </member>
        <member name="T:Triton.Controller.ControllerConfigSection">
            <summary>
            The custom configuration section of web.config for the "controllerSettings/content" section.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.ContentProviderElement">
            <summary>
            A ConfigurationElement for the elements in controllerSettings/contentProviders.
            </summary>
        </member>
        <member name="T:Triton.Controller.ContentProviderElementCollection">
            <summary>
            The collection of <b>ContentProviderElement</b>s.
            </summary>
        </member>
        <member name="T:Triton.Support.Mail.ServiceMailer">
            <summary>
            Service Mailer does not contact the email server directly. Instead, it 
            uses the service of another application to send out emails. It passes 
            information to the service provider by issuing http requests and queues 
            the requests if any error occurs.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Support.Mail.Mailer">
            <summary>
            An abstract class for mailer objects.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Support.Mail.Mailer.Send">
            <summary>
            Defines the interface of the method that sends out emails.
            </summary>
        </member>
        <member name="P:Triton.Support.Mail.Mailer.To">
            <summary>
            A list of recipient email addresses.
            </summary>
        </member>
        <member name="F:Triton.Support.Mail.ServiceMailer.failedDir">
            <summary>
            The directory to move queued messages to that have been retried the max
            # of times.
            </summary>
        </member>
        <member name="F:Triton.Support.Mail.ServiceMailer.queue">
            <summary>
            The <c>FileQueue</c> that manages the queue of failed sends.
            </summary>
        </member>
        <member name="F:Triton.Support.Mail.ServiceMailer.queueCheckTime">
            <summary>
            The interval, in minutes, to check and process the queue
            </summary>
        </member>
        <member name="F:Triton.Support.Mail.ServiceMailer.queueDir">
            <summary>
            The directory to use to queue message that fail to go thru.
            </summary>
        </member>
        <member name="F:Triton.Support.Mail.ServiceMailer.ignoreParams">
            <summary>
            Indicates request parameters which are to ignored from being added to the service.  The initial 
            defaults (to, emailtemplate) are set because otherwise they would be duplicated in the service
            send.
            </summary>
        </member>
        <member name="M:Triton.Support.Mail.ServiceMailer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Triton.Support.Mail.ServiceMailer.Send">
            <summary>
            Sends out email
            </summary>
        </member>
        <member name="M:Triton.Support.Mail.ServiceMailer.ProcessQueueEntry(Triton.Support.Collections.FileQueueEntry)">
            <summary>
            Processes an entry from the queue.
            </summary>
            <param name="entry">A file queue entry.</param>
            <returns>A boolean value that specifies if the queue entry has been 
            		processed successfully.</returns>
        </member>
        <member name="M:Triton.Support.Mail.ServiceMailer.MaxedOutQueueEntry(Triton.Support.Collections.FileQueueEntry)">
            <summary>
            Implements the <c>MaxAttemptsProcessor</c> delegate for the
            <c>FileQueue</c>.  This is called by the <c>FileQueue</c> when
            a queued message is retried the max number of times.
            This method just moves the queue entry to another directory.
            </summary>
            <param name="entry">The queue entry that has been attempted
            		the max # of times.</param>
        </member>
        <member name="M:Triton.Support.Mail.ServiceMailer.SendRequest(System.String,System.Boolean)">
            <summary>
            Attempts to send the request to the email service.  It first tries sending
            to the primary server, and if that fails and a secondary server is specified
            in the config file, attempts the secondary server.  If all attempts
            to send the request fail, the request is queued, and attempted again later.
            </summary>
            <param name="queryString">The query string containing the parameters to
            		send to the email service.</param>
            <param name="queued"><c>True</c> if the request is from a queue entry,
            		<c>false</c> if not.</param>
            <returns><c>True</c> if the request was successfully sent, <c>false</c>
            		if the send failed.</returns>
        </member>
        <member name="M:Triton.Support.Mail.ServiceMailer.SendThreaded">
            <summary>
            Creates a separate thread to call the method to perform the connection
            to the email service and send the email.
            </summary>
        </member>
        <member name="M:Triton.Support.Mail.ServiceMailer.SendToServiceThread">
            <summary>
            Wrapper call to <c>SendToService</c> with <c>void</c> return type
            to allow for use as the delegate to be called from the thread in
            <c>SendThreaded</c>.
            </summary>
        </member>
        <member name="M:Triton.Support.Mail.ServiceMailer.SendToService">
            <summary>
            Makes the connection to the email service and sends the request.
            </summary>
        </member>
        <member name="P:Triton.Support.Mail.ServiceMailer.EmailTemplate">
            <summary>
            Specifies the email to be sent out (file name of the template file)
            </summary>
        </member>
        <member name="P:Triton.Support.Mail.ServiceMailer.Parameters">
            <summary>
            Contains other information needed by the email.
            </summary>
        </member>
        <member name="P:Triton.Support.Mail.ServiceMailer.IgnoreParams">
            <summary>
            Allows the addition of parameter names to ignore from being added to the service request.
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.FileQueueEntry">
            <summary>
            <c>FileQueueEntry</c> is used by the <c>FileQueue</c> to represent an entry
            in the queue.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Support.Collections.FileQueueEntry.#ctor">
            <summary>
            Default constructor -- initializes entry properties.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.FileQueueEntry.ToString">
            <summary>
            Converts the queue entry information to a string that represents the
            information stored in the queue entry file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Triton.Support.Collections.FileQueueEntry.SetFileName(System.String)">
            <summary>
            Sets the filename of the entry.
            </summary>
            <param name="name">The filename of the entry.</param>
        </member>
        <member name="M:Triton.Support.Collections.FileQueueEntry.SetAttempts(System.Int32)">
            <summary>
            Sets the number of attempts that have been made for the entry.
            </summary>
            <param name="attempts">The number of attempts that have been made 
            		for the entry.</param>
        </member>
        <member name="M:Triton.Support.Collections.FileQueueEntry.SetQueuedTime(System.DateTime)">
            <summary>
            Sets the time the entry was added to the queue.
            </summary>
            <param name="queuedTime">The time the entry was added to the queue.</param>
        </member>
        <member name="M:Triton.Support.Collections.FileQueueEntry.SetLastAttemptTime(System.DateTime)">
            <summary>
            Sets the time of the last attempt at processing the entry.
            </summary>
            <param name="lastAttemptTime">The time of the last attempt at processing 
            		the entry.</param>
        </member>
        <member name="P:Triton.Support.Collections.FileQueueEntry.FileName">
            <summary>
            Gets the name of the file the queue entry is stored in.  This contains
            no path information.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.FileQueueEntry.Attempts">
            <summary>
            Gets the number of attempts that have been made to re-process the queue
            entry.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.FileQueueEntry.QueuedTime">
            <summary>
            Gets the date/time the entry was added to the queue.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.FileQueueEntry.LastAttemptTime">
            <summary>
            Gets the date/time of the last attempt to process the entry.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.FileQueueEntry.FilePrefix">
            <summary>
            Gets or sets the prefix to use for the file name for the queue entry.
            The default filename is simpley a timestamp, but a prefix can be added
            to the timestamp if desired.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.FileQueueEntry.Item(System.String)">
            <summary>
            Gets or sets a dynamic attribute for the queue entry.  Dynamic attributes
            are typically the information the client application needs to store and
            are not essential to the operation of the queue.
            </summary>
        </member>
        <member name="T:Triton.Model.Dao.DaoUtil">
            <summary>
            <b>DaoUtil</b> is a utility class for DAOs.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Model.Dao.DaoUtil.DBLogicalOperator">
            <summary>
            <c>DBLogicalOperator</c> defines the logical operators that can be used in 
            filters and DAOs.
            </summary>
        </member>
        <member name="T:Triton.Model.Dao.DaoUtil.DBSortDirection">
            <summary>
            Defines the direction of the sort to be used in the DAOs.
            </summary>
        </member>
        <member name="T:Triton.Controller.Format.FormatterFactory">
            <summary>
            <b>FormatterFactory</b> is the factory class for building specific <b>Formatter</b>s.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.Format.FormatterFactory.CONFIG_PATH">
            <summary>
            The "path" of the settings for Formatters in web.config
            </summary>
        </member>
        <member name="M:Triton.Controller.Format.FormatterFactory.Make(System.String,Triton.Controller.Request.MvcRequest)">
            <summary>
            Makes a <c>Formatter</c> object for the given name.
            </summary>
            <param name="formatterName">The name of the <c>Formatter</c> to create.</param>
            <param name="request">The <c>MvcRequest</c> that is used.</param>
            <returns>A <c>Formatter</c> of the specified name.</returns>
        </member>
        <member name="T:Triton.Logic.SetObjectPropertyAction">
            <summary>
            Action to set the property of an object.
            </summary>
            <remarks>
            The value to set the property to may be specified in one of 3 ways:
            <ol>
            <li>The value of a request parameter.</li>
            <li>Another object from Request.Items.</li>
            <li>A fixed value.</li>
            </ol>
            <para>Returned events:</para>
            <c>ok</c> - the property of the object was successfully set.<br/>
            <c>error</c> - an error occurred processing the action.<br/>
            </remarks>
            <author>Scott Dyke</author>
            <created>6/28/10</created>
        </member>
        <member name="T:Triton.Controller.Action.IAction">
            <summary>
            The <c>Action</c> interface defines the API for actions used in the state
            transition engine.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Action.IAction.Execute(Triton.Controller.TransitionContext)">
            <summary>
            Carries out the business actions performed by the <c>Action</c>.
            </summary>
            <param name="context">The <c>TransitionContext</c> the action is being
            		performed in.</param>
            <returns>A string containing the event resulting from the Action.</returns>
        </member>
        <member name="P:Triton.Logic.SetObjectPropertyAction.ObjectItemNameIn">
            <summary>
            Gets or sets the name of the item in Request.Items containing the
            object to set the property of.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetObjectPropertyAction.ObjectPropertyNameIn">
            <summary>
            Gets or sets the name of the property of the object to set.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetObjectPropertyAction.ValueParamNameIn">
            <summary>
            Gets or set the name of the request parameter containing the
            value to set the property to.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetObjectPropertyAction.ValueItemNameIn">
            <summary>
            Gets or sets the name of the item in Request.Items to set
            the property value to.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetObjectPropertyAction.ValueIn">
            <summary>
            Gets or sets a fixed value to set the property to.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetObjectPropertyAction.CreateObjects">
            <summary>
            Gets or sets the flag indicating whether or not the action should
            create intermediate objects in the path to the property to be set.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetObjectPropertyAction.Unwrap">
            <summary>
            Gets or sets the flag indicating whether a value coming from Request.Items should be
            unwrapped from an enclosing <c>SearchResult</c> if it is in one. This is only valid
            when using the <c>ValueItemNameIn</c> option.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetObjectPropertyAction.UnwrapAsArray">
            <summary>
            Gets or sets the flag indicating whether a value coming from Request.Items should be
            unwrapped from an enclosing <c>SearchResult</c> as the <c>SearchResult.Items</c> array
            if it is in one. This is only valid when using the <c>ValueItemNameIn</c> option.
            </summary>
        </member>
        <member name="T:Triton.Controller.Config.SitesConfig">
            <summary>
            Summary description for SitesConfig.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Config.SitesConfig.#ctor">
            <summary>
            Default constructor.  Private to enforce singleton implementation.
            </summary>
        </member>
        <member name="M:Triton.Controller.Config.SitesConfig.GetInstance">
            <summary>
            Returns the global (singleton) <c>SitesConfig</c> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Triton.Controller.Config.SitesConfig.GetSiteVersion(System.String)">
            <summary>
            Gets the version number of the given site.
            </summary>
            <param name="site">The site code to get the version for.</param>
            <returns>The version for the specified site.</returns>
        </member>
        <member name="M:Triton.Controller.Config.SitesConfig.Reset">
            <summary>
            Resets the SitesConfig singleton, forcing it to be reinitialized when
            next referenced.
            </summary>
        </member>
        <member name="T:Triton.Configuration.TritonConfigurationSection">
            <summary>
            The custom configuration section of web.config for the "triton" section.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Utilities.Constants">
            <summary>
            This class defines constants used globally throughout the code.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Support.Mail.MissingParamException">
            <summary>
            The exception that is thrown when there is an attempt to send out email 
            but a required parameter is missing in the mailer object.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Support.Error.IErrorDictionary">
            <summary>
            The <c>IErrorDictionary</c> interface defines the interface for a dictionary
            of error messages.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Model.DbSingletonBase">
            <summary>
            Summary description for DbSingletonBase.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.StateMachine.Event">
            <summary>
            Summary description for Event.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.StateMachine.EndState">
            <summary>
            The <b>EndState</b> interface must be "implemented" by any
            concrete state that causes processing within the state machine
            to end and the results be returned to the client.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.StateMachine.IState">
            <summary>
            <b>State</b> defines the interface for states in the state machine used by the
            controller to manager flow through the system.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.StateMachine.IState.GetTransition(System.String)">
            <summary>
            Gets a <b>Transition</b> from the state with the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Triton.Controller.StateMachine.IState.Execute(Triton.Controller.TransitionContext)">
            <summary>
            Carries out the actions to be performed by the state.
            </summary>
            <param name="context">The <c>TransitionContext</c> the state is being
            		executed in.</param>
            <returns>The event resulting from the execution of the state.</returns>
        </member>
        <member name="P:Triton.Controller.StateMachine.IState.Item(System.String)">
            <summary>
            Indexer to get attributes about the State.
            </summary>
            <param name="key">The name of the attribute to get.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="P:Triton.Controller.StateMachine.IState.Type">
            <summary>
            Gets the type of the state.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.IState.Id">
            <summary>
            Gets the ID of the state.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.IState.Name">
            <summary>
            Gets the name of the state.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.IState.HasPrerequisite">
            <summary>
            Gets a flag indicating whether or no the state has prerequisites.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.IState.Prerequisite">
            <summary>
            Gets the prerequisite(s) for the state.
            </summary>
        </member>
        <member name="T:Triton.Controller.StateMachine.BaseState">
            <summary>
            <b>BaseState</b> is the base, abstract implementation for states in the
            state machine used by the controller.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.StateMachine.BaseState.Execute(Triton.Controller.TransitionContext)">
            <summary>
            Carries out the actions to be performed by the state.
            </summary>
            <param name="context">The <c>TransitionContext</c> the state is being
            		executed in.</param>
            <returns>The event resulting from the execution of the state.</returns>
        </member>
        <member name="M:Triton.Controller.StateMachine.BaseState.SetType(System.String)">
            <summary>
            For internal use only.  Do not use.
            </summary>
            <param name="stateType"></param>
        </member>
        <member name="M:Triton.Logic.Support.EventUtilities.GetSearchResultEventName(System.Int32)">
            <summary>
            Get the standard event names for the given count.
            Possible names are EventNames.ZERO, EventNames.ONE, EventNames.MULTIPLE.
            </summary>
            <param name="count">The search result count.</param>
            <returns>Event name for the count.</returns>
        </member>
        <member name="T:Triton.Support.Error.ErrorDictionary">
            <summary>
            <c>ErrorDictionary</c> is an abstract base class for implementing concrete
            error dictionaries.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Utilities.Xml.XmlUtilities">
            <summary>
            </summary>
            <author>Scott Dyke</author>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Triton.Utilities.Xml.XmlUtilities.fillFromElement(System.Object,System.Xml.XmlNode)" -->
        <member name="M:Triton.Utilities.Xml.XmlUtilities.cdataEncode(System.String)">
             Returns the given String encoded within CDATA format to be safe for
             use in XML, if and only if it contains characters problematic when
             used in XML data.
            
             @param valToEncode	the string to encode.
            
             @return	the given string encoded as CDATA if it contains characters
            			not allowed in XML data, or the given string unchanged if
            			it contains no such characters.
        </member>
        <member name="M:Triton.Utilities.Xml.XmlUtilities.attributeEncode(System.String)">
             Returns the given String encoded for safe use within an XML attribute.
            
             @param valToEncode	the string to encode for an attribute value.
            
             @return	the given string encoded for safe use as an XML attribute.
        </member>
        <member name="T:Triton.Support.IO">
            <summary>
            IO contains static utility methods to support I/O operations.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Support.IO.CreateDirectory(System.String)">
            <summary>
            Creates directory(s) in the given path, if they do not exist.
            </summary>
            <remarks>
            </remarks>
            <param name="directoryPath">The path of the directory(s) to create.</param>
        </member>
        <member name="T:Triton.Logging.Logger">
            <summary>
            Logger objects are responsible for publishing messages to a data store.  There can only be one Logger
            of a given name, all of which are stored in a Singleton instance of LogManager.  Logger objects are
            instantiated through the static method Logger.GetLogger(loggerName) which will check LogManager first
            to see if it exists.  If not, it will attempt to create the logger dynamically from the Loggers.config
            file.  If this fails (logger does not have predefined settings), a custom Logger is created.  Once a 
            Logger is available, call any of the Log methods (or shortcut methods) to have the message processed.  When 
            Once these methods are called, the message is validated by checking it's level against the level of the 
            Logger object as well as applying a filter, if available.  If it passes, it is added to the message 
            queue for later processing, else nothing.  There is a TimerCallback delegate used, one for each unique Logger,
            to process the queue on a separate thread.  This delegate has a timer set so that it processes at the 
            given interval.  The process method loops all messages currently in the queue and for each, loops all 
            handlers for the Logger used to publish the message.  Any number of Handler objects can be added to a 
            Logger for message processing.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Logging.Logger.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>A TimerCallback delegate is used for each instance of Logger so we have one thread that processes the Queue.
            A timer is set on the deleagate to start the thread and execute it at the specified time interval.</remarks>
            <param name="name"><c>String</c> that specifies the name of the <c>Logger</c></param>
            <returns><c>Logger</c> object</returns>
        </member>
        <member name="M:Triton.Logging.Logger.GetLogger(System.String)">
            <summary>
            Returns a <c>Logger</c> object of the desired name and level.
            </summary>
            <param name="name"><c>String</c> that specifies the name of the <c>Logger</c></param>
            <returns><c>Logger</c> object</returns>
        </member>
        <member name="M:Triton.Logging.Logger.Flush">
            <summary>
            Synchronously clears the message queue.
            </summary>
        </member>
        <member name="M:Triton.Logging.Logger.Log(Triton.Logging.MessageLevel,System.String)">
            <summary>
            Performs level validation for message and if it passes, adds it to the message Queue.
            </summary>
            <param name="level"><c>MessageLevel</c> that specifies the level of the message</param>
            <param name="message"><c>String</c> that specifies the message text</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.Log(Triton.Logging.MessageLevel,System.String,System.Exception)">
            <summary>
            Performs level validation for message and if it passes, adds it to the message Queue.
            </summary>
            <param name="level"><c>MessageLevel</c> that specifies the level of the message</param>
            <param name="message"><c>String</c> that specifies the message text</param>
            <param name="exception"><c>Exception</c> that specifies the error that occured</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.Log(Triton.Logging.MessageLevel,System.String,System.Exception,System.Object,System.Object[])">
            <summary>
            Performs level validation for message and if it passes, adds it to the message Queue.
            </summary>
            <param name="level"><c>MessageLevel</c> that specifies the level of the message.</param>
            <param name="message"><c>String</c> that specifies the message text.</param>
            <param name="exception"><c>Exception</c> that specifies the error that occured.</param>
            <param name="eventArg">An optional reference to context information about the
            		origin of the message to log.  Pass null if no context information needed.</param>
            <param name="parms">Additional content to be included in the message.</param>
        </member>
        <member name="M:Triton.Logging.Logger.Error(System.String,System.Exception)">
            <summary>
            Shortcut to Log for an ERROR message.
            </summary>
            <param name="message"><c>String</c> that specifies the message text</param>
            <param name="exception"><c>Exception</c> that specifies the error that occured</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.Config(System.String)">
            <summary>
            Shortcut to Log for a CONFIG message.
            </summary>
            <param name="message"><c>String</c> that specifies the message text</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.Status(System.String)">
            <summary>
            Shortcut to Log for a INFO message.
            </summary>
            <param name="message"><c>String</c> that specifies the message text</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.Warning(System.String)">
            <summary>
            Shortcut to Log for a WARNING message.
            </summary>
            <param name="message"><c>String</c> that specifies the message text</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.SevereError(System.String,System.Exception)">
            <summary>
            Shortcut to Log for a SEVERE_ERROR message.
            </summary>
            <param name="message"><c>String</c> that specifies the message text</param>
            <param name="exception"><c>Exception</c> that specifies the error that occured</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.AddHandler(Triton.Logging.LogHandler)">
            <summary>
            Adds a LogHandler object to the handlers collection which indicates how the messages for this Logger should be handled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.IsLoggable(Triton.Logging.LogMessage)">
            <summary>
            Performs level validation testing message level against Logger level, and applies the filter.
            </summary>
            <param name="message"><c>LogMessage</c> object to validate</param>
            <returns><b>bool</b> indicating if the <c>LogMessage</c> can be published according to its level</returns>
        </member>
        <member name="M:Triton.Logging.Logger.QueueMessage(Triton.Logging.LogMessage)">
            <summary>
            Adds the message to the <c>Queue</c> and triggers an event to process the queue.
            </summary>
            <param name="message"><c>LogMessage</c> object to validate</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.ProcessQueue(System.Object)">
            <summary>
            Processes the messages in the <c>Queue</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.FillLogger(System.String)">
            <summary>
            Creates the Logger object from settings in the Loggers.config.
            </summary>
            <param name="name"><c>String</c> that specifies the name of the <c>Logger</c> to lookup.</param>
            <returns><c>Logger</c> name</returns>
        </member>
        <member name="M:Triton.Logging.Logger.FillFilter(Triton.Utilities.Configuration.XmlConfiguration)">
            <summary>
            Creates a filter to apply the the Logger from the corresponding section in Loggers.config.
            </summary>
            <param name="name"><c>String</c> that specifies the name of the <c>Logger</c> to lookup.</param>
            <returns><c>ILogFilter</c> set for Logger from config file.</returns>
        </member>
        <member name="M:Triton.Logging.Logger.FillHandlers(Triton.Utilities.Configuration.XmlConfiguration)">
            <summary>
            Creates the Handler objects from the corresponding section in Loggers.config.
            </summary>
            <param name="config"><c>XmlConfiguration</c> section of Loggers.config to pull Handler object settings.</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Logging.Logger.SetObjectAttribute(System.Object,System.String,System.String)">
            <summary>
            Dynamically sets public properties of the Logger using reflection and Loggers.config.  Attributes will map to 
            object public properties that need to be set.
            </summary>
            <param name="obj"><c>Object</c> (Logger object).</param>
            <param name="attrName"><c>String</c> name of Logger property.</param>
            <param name="attrValue"><c>String</c> value to set Logger property to.</param>
            <returns></returns>
        </member>
        <member name="P:Triton.Logging.Logger.Name">
            <summary>
            Name Property.
            </summary>
            <remarks>Gets/Sets the name of the Logger.</remarks>
            <param name="value"><c>String</c> that specifies the name of the <c>Logger</c></param>
            <returns><c>Logger</c> name</returns>
        </member>
        <member name="P:Triton.Logging.Logger.Level">
            <summary>
            Level Property.
            </summary>
            <remarks>Gets/Sets the minimun level of messages that the Logger will publish.</remarks>
            <param name="value"><c>String</c> that specifies the level of the <c>Logger</c></param>
            <returns><c>Logger</c> level</returns>
        </member>
        <member name="P:Triton.Logging.Logger.Filter">
            <summary>
            Filter Property.
            </summary>
            <remarks>Gets/Sets Filter object for the Logger.</remarks>
            <param name="value"><c>ILogFilter</c> that specifies the Filter of the <c>Logger</c></param>
            <returns><c>Logger</c> filter</returns>
        </member>
        <member name="P:Triton.Logging.Logger.ReportInnerExceptions">
            <summary>
            Specifies whether or not <c>ERROR</c> and <c>SEVERE_ERROR</c> logging add the inner exceptions to
            the output
            </summary>
            <param name="value"><c>True</c> if you want the inner exceptions to write out to the logs,
            <c>False</c> otherwise.</param>
            <returns><c>Boolean</c> specifying whether or not inner exceptions are written to the logs</returns>
        </member>
        <member name="T:Triton.Controller.Request.MvcXmlRequest">
            <summary>
            <b>MvcXmlRequest</b> is the implementation of the <b>MvcRequest</b> interface
            for XML requests.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.Request.MvcXmlRequest.REQUEST_XML">
            <summary>
            The name in the <i>Items</i> property of the XmlDocument containing the initial request.
            </summary>
        </member>
        <member name="F:Triton.Controller.Request.MvcXmlRequest.RESPONSE_XML">
            <summary>
            The name in the <i>Items</i> property of the XmlDocument containing the initial request.
            </summary>
        </member>
        <member name="F:Triton.Controller.Request.MvcXmlRequest.parameters">
            <summary>
            Represents custom parameters.
            </summary>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.#ctor(System.Web.HttpContext)">
            <summary>
            Constructs a <b>MvcXmlRequest</b> from the given HttpContext.
            </summary>
            <param name="httpContext">The <b>HttpContext</b> to construct the MvcXmlRequest from.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.#ctor(System.Web.HttpContext,System.String)">
            <summary>
            Overloaded contstuctor that receives an additional string parameter 
            which is the string representation of the HttpContext so we don't have 
            to load it twice.
            </summary>
            <param name="httpContext">The <b>HttpContext</b> to construct the MvcXmlRequest from.</param>
            <param name="contextStreamData"><b>HttpContext.Request.InputStream</b>'s full content.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.GetItem``1(System.Object)">
            <summary>
             Retrieves the specific Type of object from the Items Dictionary.
            </summary>
            <param name="key">Object key.</param>
            <typeparam name="T">Type of object to return.</typeparam>
            <returns>The corresponding key value.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.GetCookie(System.String)">
            <summary>
            Returns a <b>MvcCookie</b> from the request with the given name, 
            or null if no cookie with that name exists.
            </summary>
            <param name="name">The name of the cookie to get.</param>
            <returns>A <b>MvcCookie</b> with the given name, or null if no 
            	cookie with that name exists.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.GetResponseCookie(System.String)">
            <summary>
            Returns a <b>MvcCookie</b> from the response with the given name, 
            or null if no cookie with that name exists.
            </summary>
            <param name="name">The name of the response cookie to get.</param>
            <returns>A <b>MvcCookie</b> with the given name, or null if no 
            	cookie with that name exists in the response.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.SetResponseCookie(Triton.Controller.Request.MvcCookie)">
            <summary>
            Sets a <b>MvcCookie</b> in the response.  If the cookie already
            exists, its information is updated, if not, it is created.
            </summary>
            <param name="cookie">The <b>MvcCookie</b> to set in the response.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.WriteResponse(System.String,System.Boolean)">
            <summary>
            Writes the given content to the request's response.
            </summary>
            <param name="content">The content to write to the response.</param>
            <param name="endResponse"><b>True</b> if the response is to be ended,
            	<b>false</b> if not.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.Execute(System.String)">
            <summary>
            Executes the given URL and returns the content returned by the URL.
            </summary>
            <param name="url">The URL to execute.</param>
            <returns>The content returned from the given URL.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.Transfer(System.String)">
            <summary>
            Transfers processing of the request to the given URL.
            </summary>
            <param name="url">The URL to transfer processing to.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.Redirect(System.String)">
            <summary>
            Redirects a client to a new URL and specifies the new URL.
            </summary>
            <param name="url">The target location.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcXmlRequest.LoadXml(System.String)">
            <summary>
            Loads the information into the request from the given XML string.
            </summary>
            <param name="xmlData">An XML string containing the inforamtion to load
            	into the request.</param>
        </member>
        <member name="P:Triton.Controller.Request.MvcXmlRequest.Item(System.String)">
            <summary>
            Gets or Sets the parameter with the given name.
            Indexer for a <b>MvcXmlRequest</b>.  
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcXmlRequest.Params">
            <summary>
            Returns a <b>NameValueCollection</b> of all parameters in the request, including custom ones.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcXmlRequest.Items">
            <summary>
            Gets a collection of objects used internally for the processing of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcXmlRequest.Version">
            <summary>
            Gets the version of the target "page" for rendering the response.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcXmlRequest.IP">
            <summary>
            Gets the IP address of the origin of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcXmlRequest.UserName">
            <summary>
            Gets the logon user of the client request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcXmlRequest.Files">
            <summary>
            Gets the collection of client-uploaded files.
            </summary>
        </member>
        <member name="T:Triton.Logic.StoreObjectToSessionAction">
            <summary>
            Action to store an object to session.
            </summary>
            <remarks>
            <para>Returned events:</para>
            <c>ok</c> - successfully stored the object in session.<br/>
            <c>novalue</c> - no object was found in Request.Items for the given name.<br/>
            <c>error</c> - an error occurred while attempting to store the object to session.<br/>
            </remarks>
            <author>Scott Dyke</author>
            <created>3/11/10</created>
        </member>
        <member name="P:Triton.Logic.StoreObjectToSessionAction.ObjectItemNameIn">
            <summary>
            Gets or sets the name of the item in Request.Items containing the object
            to place into session.  If wrapped in a SearchResult, the action unwraps the object.
            </summary>
        </member>
        <member name="P:Triton.Logic.StoreObjectToSessionAction.SessionName">
            <summary>
            Gets or sets the name under which the object is stored in session.
            </summary>
        </member>
        <member name="P:Triton.Logic.StoreObjectToSessionAction.ExtractFromSearchResult">
            <summary>
            Gets or sets the flag to indicate if the object stored in session
            should be extracted from a SearchResult if embedded in such, or
            store "as is" from Items (keeping the SearchResult if present).
            Default is <c>false</c>, keeping the SearchResult if present.
            </summary>
        </member>
        <member name="T:Triton.Support.Error.NoSuchErrorException">
            <summary>
            
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Support.Collections.CacheItem">
            <summary>
            <b>CacheItem</b> is an item maintained by the <b>Cache</b> class.  It is
            not intended for external use.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Support.Collections.CacheItem.addedAt">
            <summary>
            The time at which the item was added.
            </summary>
        </member>
        <member name="F:Triton.Support.Collections.CacheItem.refObject">
            <summary>
            A reference to the application object maintained by the CacheItem.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.CacheItem.#ctor(System.Object,System.DateTime)">
            <summary>
            Constructs a new <b>CacheItem</b> for the given object and
            expiration time.
            </summary>
            <param name="theObject"></param>
            <param name="expiresAt"></param>
        </member>
        <member name="P:Triton.Support.Collections.CacheItem.ExpiresAt">
            <summary>
            Gets or sets the time at which the item expires.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.CacheItem.AddedAt">
            <summary>
            Gets the time at which the item was created.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.CacheItem.Object">
            <summary>
            Gets the underlying application object.
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.CacheException">
            <summary>
            The exception that is thrown when a Cache error occurs.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.CacheException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CacheException 
            class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Triton.Support.Collections.CacheException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CacheException 
            class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Inner exception that occured.</param>
        </member>
        <member name="T:Triton.Controller.Action.FormatableAction">
            <summary>
            <b>FormatableAction</b> is an abstract class that implements support for
            associating a <b>Formatter</b> with an Action.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="P:Triton.Controller.Action.FormatableAction.Formatter">
            <summary>
            Gets or sets the <b>Formatter</b> to be used to format the results
            of executing the action.
            </summary>
        </member>
        <member name="T:Triton.Logic.GetObjectPropertyAsParameterAction">
            <summary>
            Gets a property of an object in Request.Items and sets a request parameter
            to the property value.
            </summary>
            <remarks>
            <para>Returned events:</para>
            <c>ok</c> - the property value was successfully retrieved and stored in a parameter.<br/>
            <c>novalue</c> - there was no value for the property.<br/>
            <c>error</c> - an error occurred while attempting to get the item's property.<br/>
            </remarks>
            <author>Scott Dyke</author>
            <created>6/30/10</created>
        </member>
        <member name="P:Triton.Logic.GetObjectPropertyAsParameterAction.ObjectItemNameIn">
            <summary>
            Gets or sets the name of the item in Request.Items to get the
            property from.
            </summary>
        </member>
        <member name="P:Triton.Logic.GetObjectPropertyAsParameterAction.ObjectPropertyNameIn">
            <summary>
            Gets or sets the name of the property to get.
            Optional. If not provided the object itself is returned, as a string.
            </summary>
        </member>
        <member name="P:Triton.Logic.GetObjectPropertyAsParameterAction.ParameterNameOut">
            <summary>
            Gets or sets the name of the request parameter to store the
            property value in.
            </summary>
        </member>
        <member name="T:Triton.CodeContracts.ActionContract">
            <summary>
            Contains static methods for a Requires action precondition that throws an exception if condition fails.
            </summary>
        </member>
        <member name="M:Triton.CodeContracts.ActionContract.Requires``1(System.Boolean)">
            <summary>
            Specifies an action precondition contract for the enclosing execute method, and throws an
            exception if the condition for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the condition is false.</typeparam>
            <param name="condition">The conditional expression to test.</param>
        </member>
        <member name="M:Triton.CodeContracts.ActionContract.Requires``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Specifies an action precondition contract for the enclosing execute method, and throws an
            exception if the condition for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the condition is false.</typeparam>
            <param name="condition">The conditional expression to test.</param>
            <param name="userMessage">The message to display if the condition is false.</param>
            <param name="args">An object array of values to include in userMessage.</param>
        </member>
        <member name="T:Triton.Utilities.Set">
            <author>Seth Peck</author>
            <date>11/01/2001</date>
            <email>seth@poetic.com</email>
             <summary>
             A basic Set object for set arithmetic.  The Set class was designed without keeping
             track of type frequency.  Since order is not a matter of importance with Set arithmetic
             but of importance for efficiency in speed, the Set is ordered if all of its contained
             objects have the same Type.
             </summary>
        </member>
        <member name="M:Triton.Utilities.Set.#ctor">
            <summary>
            Constructs a new Set object with zero elements.
            </summary>
        </member>
        <member name="M:Triton.Utilities.Set.#ctor(System.Object[])">
            <summary>
            Constructs a new Set object with listed values.  If there are any duplications
            of the same element, these duplicates are ignored.
            </summary>
            <param name="values">a list of objects separated by commas.</param>
        </member>
        <member name="M:Triton.Utilities.Set.#ctor(System.Collections.ICollection)">
            <summary>
            Turn an ICollection into a Set.  Duplicates are removed.
            </summary>
            <param name="collection">the ICollection to be put into the Set.</param>
        </member>
        <member name="M:Triton.Utilities.Set.CopyTo(System.Array,System.Int32)">
            <summary>
            CopyTo copies the elements of the Set into an array.
            </summary>
            <param name="array">The one dimensional array that is the destination
            the elements copied from the Set.  The array must have zero-based indexing.</param>
            <param name="i">The zero-based index in array in which copying begins.</param>
        </member>
        <member name="M:Triton.Utilities.Set.GetEnumerator">
            <summary>
            Required in order to reference objects in a Set through the <code>foreach</code>
            method.
            </summary>
            <returns>an enumerator for the SetCollections.Set class.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.Add(System.Object)">
            <summary>
            Adds an object to the Set.  If the object already exists in the Set,
            the object is ignored.
            </summary>
            <param name="obj">the object to be added to the Set.</param>
            <returns>a boolean value, true if the object was added to the Set and
            false if the object was already in the Set.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.Add(System.Object[])">
            <summary>
            Performs multiple Add()'s on a list of objects.
            </summary>
            <param name="values">a list of objects separated by commas.</param>
        </member>
        <member name="M:Triton.Utilities.Set.Contains(System.Object)">
            <summary>
            Tells whether an object is in a Set or not.
            </summary>
            <param name="obj">the test case for the Set.</param>
            <returns>a boolean value, true if the object is in the set.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.Remove(System.Object)">
            <summary>
            Removes an object from the Set.
            </summary>
            <param name="obj">the object to be removed from the Set.</param>
            <returns>a boolean value, true if the object was in the Set and
            false if it was not.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.Remove(System.Object[])">
            <summary>
            Removes a series of objects from a Set.
            </summary>
            <param name="values">a list of objects to be removed.</param>
        </member>
        <member name="M:Triton.Utilities.Set.Clear">
            <summary>
            Removes all items from the Set.
            </summary>
        </member>
        <member name="M:Triton.Utilities.Set.Equals(System.Object)">
            <summary>
            Overrides the Equals method for Sets, based on the hashcodes of the objects.
            </summary>
            <param name="obj">an object to be compared to.</param>
            <returns>true if the two sets contain the same elements.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.ToArray">
            <summary>
            Used to convert a Set to an Array, as well as to enhance the
            efficiency of the union, intersect and difference operators.
            </summary>
            <returns>an array of objects.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.op_LessThanOrEqual(Triton.Utilities.Set,Triton.Utilities.Set)">
            <summary>
            Overloaded operator for subset notation.
            </summary>
            <param name="lhs">a Set (S).</param>
            <param name="rhs">a Set (T).</param>
            <returns>true if S is a subset of T.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.op_GreaterThanOrEqual(Triton.Utilities.Set,Triton.Utilities.Set)">
            <summary>
            Overloaded operator for superset notation.
            </summary>
            <param name="lhs">a Set (S).</param>
            <param name="rhs">a Set (T).</param>
            <returns>true if S is a superset of T.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.op_LessThan(Triton.Utilities.Set,Triton.Utilities.Set)">
            <summary>
            Overloaded operator for proper subset notation.
            </summary>
            <param name="lhs">a Set (S).</param>
            <param name="rhs">a Set (T).</param>
            <returns>true if S is a proper subset of T.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.op_GreaterThan(Triton.Utilities.Set,Triton.Utilities.Set)">
            <summary>
            Overloaded operator for proper superset notation.
            </summary>
            <param name="lhs">a Set (S).</param>
            <param name="rhs">a Set (T).</param>
            <returns>true if S is a proper superset of T.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.Subsets">
            <summary>
            Gets all subsets of the Set.
            </summary>
            <returns>a Set of subsets of the this Set.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.Subsets(System.Int32)">
            <summary>
            Gets all subsets of the Set of Count count.
            </summary>
            <param name="count">number of elements in each subset.</param>
            <returns>a Set of subsets with the desired number of elements.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.ToString">
            <summary>
            Returns a string representation of the Set.
            </summary>
            <returns>a string in the form <code>(a, b, c)</code>.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.MapToSet(Triton.Utilities.Set,Triton.Utilities.Set.Map)">
            <summary>
            Applies a Map function to every object in a Set.
            </summary>
            <param name="s">The Set to be Mapped.</param>
            <param name="m">The Map function to apply to the Set.</param>
            <returns>A new Set with Mapped values.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.op_Addition(Triton.Utilities.Set,Triton.Utilities.Set)">
            <summary>
            Overloaded operator for the union of two Sets.
            </summary>
            <param name="lhs">a Set (S).</param>
            <param name="rhs">a Set (T).</param>
            <returns>the union of Sets S and T (S V T).</returns>
        </member>
        <member name="M:Triton.Utilities.Set.op_Multiply(Triton.Utilities.Set,Triton.Utilities.Set)">
            <summary>
            Overloaded operator for the intersection of two Sets.
            </summary>
            <param name="lhs">a Set (S).</param>
            <param name="rhs">a Set (T).</param>
            <returns>the intersection of Sets S and T (S ^ T).</returns>
        </member>
        <member name="M:Triton.Utilities.Set.op_Subtraction(Triton.Utilities.Set,Triton.Utilities.Set)">
            <summary>
            Overloaded operator for subtracting one Set from the other.
            </summary>
            <param name="lhs">a Set (S).</param>
            <param name="rhs">a Set (T).</param>
            <returns>A set with all the elements in Set S, but without the
            elements of Set T (S - T).</returns>
        </member>
        <member name="M:Triton.Utilities.Set.op_Division(Triton.Utilities.Set,Triton.Utilities.Set)">
            <summary>
            Overloaded operator for complimenting one Set from the other.  This is
            the same as (S + T) - (S * T).
            </summary>
            <param name="lhs">a Set (S).</param>
            <param name="rhs">a Set (T).</param>
            <returns>A set with all the uncommon elements of S and T.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.CrossProduct(Triton.Utilities.Set)">
            <summary>
            This function determines the cross product of two Sets.  Two cautions should
            be taken when using CrossProduct:
            <list type="1">
            <item>For large sets, this method can take a long time.</item>
            <item>If Set s has any elements that are also in this Set, the list of Sets will
            contain (one or more) Sets with fewer elements than the majority.</item>
            </list>
            </summary>
            <param name="s">A second Set to be crossed with the original Set.</param>
            <returns>a Set representing the cross product of two Sets.</returns>
        </member>
        <member name="M:Triton.Utilities.Set.GetHashCode">
            <summary>
            Serves as a hash function for the Set type.
            </summary>
            <returns>an integer code for hashtables.</returns>
        </member>
        <member name="P:Triton.Utilities.Set.Homogenous">
            <summary>
            A boolean state of whether the elements in the Set are of the same Type
            or not.
            </summary>
        </member>
        <member name="P:Triton.Utilities.Set.Item(System.Int32)">
            <summary>
            Indexed property notation for Sets.
            </summary>
        </member>
        <member name="P:Triton.Utilities.Set.Count">
            <summary>
            Returns the number of elements in the Set.
            </summary>
        </member>
        <member name="P:Triton.Utilities.Set.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the Set.
            </summary>
        </member>
        <member name="P:Triton.Utilities.Set.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the Set is synchronized (thread safe).
            </summary>
        </member>
        <member name="T:Triton.Utilities.Set.Map">
            <summary>
            A delegate definition for changing an object's value.  
            </summary>
        </member>
        <member name="T:Triton.Utilities.ConvertUtilities">
            <summary>
            </summary>
             <author>Garun Vagidov</author>
        </member>
        <member name="T:Triton.Model.Dao.IGenericDao`1">
            <summary>
            This interface defines a parameterized Dao that can operate on any table/view
            and return a collection of the type specified.
            </summary>
            <typeparam name="T">The <b>Type</b> of the object the Dao is to return.</typeparam>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Model.Dao.IGenericDao`1.SaveData(System.String)">
            <summary>
            Saves data to the permanent store.  <b>SaveData</b> operates only on
            a single table -- it cannot save to multiple tables at one time.
            <b>SaveData</b> can either update existing data, or insert new data.
            </summary>
            <remarks>
            The XML given as input to <b>SaveData</b>is of the following format.
            For inserting new data:
            <pre>
            <Insert table="">
            	<Row>
            		<Fields>
            			<Field name=""></Field>
            			...
            			<Null>
            				<Field name="" />
            			</Null>
            		</Fields>
            	</Row>
            	...
            </Insert>
            </pre>
            <p>For updating existing data:</p>
            <pre>
            <Update table="">
            	<Fields>
            		<Field name=""></Field>
            		...
            		<Null>
            			<Field name="" />
            		</Null>
            	</Fields>
            	<Where>
            		...
            	</Where>
            </Update>
            </pre>
            </remarks>
            <param name="xml">The XML definition of the data to save to the permanent
            		store.</param>
        </member>
        <member name="M:Triton.Model.Dao.IGenericDao`1.Delete(System.String,System.String[])">
            <summary>
            Deletes records from the specified table.
            </summary>
            <param name="tableName">The name of the table to delete records from.</param>
            <param name="conditions">The condition(s) for which records to delete.  Conditions
            		are of the form [field_name][operator][value].  For example: "id=3".
            		If <b>conditions</b> is null all records are deleted.</param>
            <returns>The number of records deleted.</returns>
        </member>
        <member name="T:Triton.Model.Dao.DaoFactory">
            <summary>
            <b>DaoFactory</b> is the factory class for obtaining a Dao.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Model.Dao.DaoFactory.GetGenericDao">
            <summary>
            Returns an instance of a <c>IGenericDao</c> with the default db connection.
            The concrete class instantiated is defined in the web.config file.
            </summary>
            <returns>A <c>IGenericDao</c>.</returns>
        </member>
        <member name="M:Triton.Model.Dao.DaoFactory.GetGenericDao(System.String)">
            <summary>
            Returns an instance of a <c>IGenericDao</c> for the specified connection type.
            The concrete class instantiated is defined in the web.config file.
            </summary>
            <returns>A <c>IGenericDao</c>.</returns>
        </member>
        <member name="M:Triton.Model.Dao.DaoFactory.GetGenericDao``1">
            <summary>
            Returns an instance of a <c>IGenericDao</c> for the specified connection type.
            The concrete class instantiated is defined in the web.config file.
            </summary>
            <remarks>
            The config setting for the parameterized IGenericDao should look something like
            this: "Triton.Model.Dao.MsGenericDao`1[[T]],Model".
            </remarks>
            <typeparam name="T">The type of the generic Dao to create.</typeparam>
            <returns>A <c>IGenericDao&lt;T&gt;</c> for the given type.</returns>
        </member>
        <member name="M:Triton.Model.Dao.DaoFactory.GetGenericDao``1(System.String)">
            <summary>
            Returns an instance of a <c>IGenericDao</c> for the specified connection type.
            The concrete class instantiated is defined in the web.config file.
            </summary>
            <remarks>
            The config setting for the parameterized IGenericDao should look something like
            this: "Triton.Model.Dao.MsGenericDao`1[[T]],Model".
            </remarks>
            <typeparam name="T">The type of the generic Dao to create.</typeparam>
            <param name="connType">The connection type to use for the Dao.</param>
            <returns>A <c>IGenericDao&lt;T&gt;</c> for the given type.</returns>
        </member>
        <member name="M:Triton.Model.Dao.DaoFactory.GetDao``1(System.String)">
            <summary>
            Returns an instance of a Dao that is mapped in the config file.
            </summary>
            <param name="name">Key name of the Dao to return</param>
            <remarks>
            The name of the node in the daoSettings section of the config file must be the
            class name of "T".
            </remarks>
            <typeparam name="T">Type of the Dao to return.</typeparam>
            <returns>An instance of a Dao that as defined in the config file.</returns>
        </member>
        <member name="M:Triton.Model.Dao.DaoFactory.GetDao``1">
            <summary>
            Returns an instance of a Dao that is mapped in the config file. Defaults to "class" as the key name.
            </summary>
            <remarks>
            The name of the node in the daoSettings section of the config file must be the
            class name of "T".
            </remarks>
            <typeparam name="T">Type of the Dao to return.</typeparam>
            <returns>An instance of a Dao that as defined in the config file.</returns>
        </member>
        <member name="T:Triton.Model.Dao.ConfigSmStateDao">
            <summary>
            <b>ConfigSmStateDao</b> implements the <b>IStateMachineStatesDao</b> interface to load
            state/transition information from an XML config file.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.StateMachine.IStateMachineStatesDao">
            <summary>
            The <b>IStateMachineStatesDao</b> interface defines the contract used by the state machine
            to load states and related information from a database.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.StateMachine.IStateMachineStatesDao.LoadStates">
            <summary>
            Loads the states and transitions from the data source.
            </summary>
            <returns>An array of <b>State</b>s that were loaded from the data source.</returns>
        </member>
        <member name="M:Triton.Model.Dao.ConfigSmStateDao.LoadStates">
            <summary>
            Loads the state/tranistion information for an XML config file.
            </summary>
            <remarks>
            The path to the config file to load is specified in the application's config file
            appSettings section, with the "statesConfigPath" setting.
            </remarks>
            <returns>A <b></b> object with the state/transition information loaded from the
            		config file.</returns>
        </member>
        <member name="M:Triton.Model.Dao.ConfigSmStateDao.LoadTransitions(System.Xml.XmlNode)">
            <summary>
            Loads the transitions defined within the given node.
            </summary>
            <remarks>
            If the given parent node has an <b>id</b> attribute, that ID value is used
            as the parent state ID for the transitions loaded from the node.
            </remarks>
            <param name="parentNode">The XmlNode to load the transitions from.</param>
            <returns>A <b>List&lt;Transition&gt;</b> containing the transitions loaded from the given node.</returns>
        </member>
        <member name="M:Triton.Model.Dao.ConfigSmStateDao.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the value of an attribute of a <b>XmlNode</b> if it exists.
            </summary>
            <remarks>
            This is simply a convenience method that performs the checks for the existance
            of the node and attribute before attempting to get the value.
            </remarks>
            <param name="node">The <b>XmlNode</b> to get the attribute from.</param>
            <param name="attribute">The name of the attribute to get the value for.</param>
            <returns>The value of the specified attribute of the given <b>XmlNode</b>, or
            	null if the node or attribute do not exist.</returns>
        </member>
        <member name="T:Triton.Controller.TransitionContext">
            <summary>
            <b>TransitionContext</b> contains context information about the request and
            transition being processed by the state machine.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.TransitionContext.#ctor(Triton.Controller.StateMachine.IState,System.String,System.String,Triton.Controller.Request.MvcRequest)">
            <summary>
            Constructs a <c>TransitionContext</c> for the given starting state and
            site.
            </summary>
            <param name="startState">The starting state of the context.</param>
            <param name="startEvent">The start event of the context.</param>
            <param name="site">The site of the context.</param>
            <param name="request">The <c>MvcRequest</c>.</param>
        </member>
        <member name="M:Triton.Controller.TransitionContext.SetCurrentState(Triton.Controller.StateMachine.IState)">
            <summary>
            Sets the state that is currently being processed.
            </summary>
            <param name="curState">The state that is currently being processed.</param>
        </member>
        <member name="P:Triton.Controller.TransitionContext.StartState">
            <summary>
            Gets the state that was the starting state of the context.
            </summary>
        </member>
        <member name="P:Triton.Controller.TransitionContext.EndState">
            <summary>
            Gets the state that is the end PageState of the transition sequence.
            </summary>
        </member>
        <member name="P:Triton.Controller.TransitionContext.CurrentState">
            <summary>
            Gets the state that is currently being processed.
            </summary>
        </member>
        <member name="P:Triton.Controller.TransitionContext.StartEvent">
            <summary>
            Gets the starting event for the context.
            </summary>
        </member>
        <member name="P:Triton.Controller.TransitionContext.Site">
            <summary>
            Gets the site code of the site the context is for.
            </summary>
        </member>
        <member name="P:Triton.Controller.TransitionContext.Version">
            <summary>
            Gets the version of the site the context is for.
            </summary>
        </member>
        <member name="P:Triton.Controller.TransitionContext.PublishKey">
            <summary>
            Gets or sets the publish key used by the publishing system.
            </summary>
        </member>
        <member name="P:Triton.Controller.TransitionContext.Request">
            <summary>
            Gets the MvcRequest associated with the TransitionContext.
            </summary>
        </member>
        <member name="T:Triton.Controller.StateMachine.StateTransitioner">
            <summary>
            Summary description for StateTransitioner.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.StateMachine.StateTransitioner.DoTransition(Triton.Controller.StateMachine.IState,System.String,Triton.Controller.TransitionContext)">
            <summary>
            Performs a transition from the given state to the start indicated by
            the transition defined by the state map matching the given event.
            </summary>
            <param name="startState">The state being transitioned from.</param>
            <param name="eventName">The event causing the transition.</param>
            <param name="transContext">The context of the request the transition is being
            		performed for.</param>
            <returns>A <c>string</c> containing the name of the target of the transition.
            		This may be a page name if the resulting state is a <c>PageState</c>,
            		or an action name if the resulting state is a <c>ActionState</c></returns>
        </member>
        <member name="T:Triton.Controller.StateMachine.StateManager">
            <summary>
            <c>StateManager</c> is a singleton responsible for managing
            the flow of the system.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.StateMachine.StateManager.GetInstance">
            <summary>
            Returns the single instance of the <c>StateManager</c>.
            </summary>
            <returns>The single instance of the <c>StateManager</c></returns>
        </member>
        <member name="M:Triton.Controller.StateMachine.StateManager.GetState(System.Int64)">
            <summary>
            Gets a state from the state map for the given ID.
            </summary>
            <param name="id">The ID of the state to get.</param>
            <returns>The <c>State</c> with the specified ID, or null if no such state.</returns>
        </member>
        <member name="M:Triton.Controller.StateMachine.StateManager.GetSmStatesDao">
            <summary>
            Returns an instance of a <c>IStateMachineStatesDao</c>.  The concrete class
            instantiated is defined in the config file.
            </summary>
            <returns>A <c>IPublishDao</c>.</returns>
        </member>
        <member name="M:Triton.Controller.StateMachine.StateManager.LoadStates">
            <summary>
            Loads the state transition information from the database.
            </summary>
        </member>
        <member name="T:Triton.Controller.Command.TransitionCommand">
            <summary>
            <b>TransitionCommand</b> is the command that handles requests that utilize the
            state machine.
            </summary>
            <remarks>
            <b>TransitionCommand</b> handles the processing of states and transitions and 
            provides hooks in the form of abstract and virtual methods to control the
            specific operation.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Command.TransitionCommand.Execute(Triton.Controller.Request.MvcRequest)">
            <summary>
            Carries out the actions required to execute the command.
            </summary>
            <param name="request">The <c>MvcRequest</c> request
            		that triggered the command to be executed.</param>
        </member>
        <member name="M:Triton.Controller.Command.TransitionCommand.UseDynamicContent(Triton.Controller.Request.MvcRequest)">
            <summary>
            Determines whether or not the system should be forced to use dynamic content
            regardless of existance of published content.
            </summary>
            <param name="request">The <b>MvcRequest</b> the determination is being made for.</param>
            <returns><b>True</b> to force dynamic content to be returned to the client,
            	or <b>false</b> if published content can be used if it's available.</returns>
        </member>
        <member name="M:Triton.Controller.Command.TransitionCommand.ForceRepublish(Triton.Controller.Request.MvcRequest)">
            <summary>
            Determines whether or not the published content should be forced to be regenerated.
            </summary>
            <param name="request">The <b>MvcRequest</b> the determination is being made for.</param>
            <returns><b>True</b> if the published content should be force to be regenerated,
            	or <b>false</b> if not.</returns>
        </member>
        <member name="T:Triton.Controller.Command.GoPageCommand">
            <summary>
            Summary description for GetPageCommand.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Support.Session.ISessionState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Triton.Support.Session.ISessionState.Item(System.String)">
            <summary>
            Gets or sets the value of an item in the cache with the given key.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Triton.Model.SingletonBase`3" -->
        <member name="P:Triton.Model.SingletonBase`3.GetKey">
            <summary>
            Gets or sets the delegate method used to get the key
            for an element in the singleton. If no GetKey delegate
            is provided, the default field identified in the configuration
            file is used.
            </summary>
        </member>
        <member name="P:Triton.Model.SingletonBase`3.Exists">
            <summary>
            Indicates whether or not the singleton instance exists.
            </summary>
        </member>
        <member name="T:Triton.Model.SingletonBase`3.GetKeyDelegate">
            <summary>
            Defines the delegate to get the key for an element.
            This is the key the singleton is indexed on. It must
            be unique.
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Triton.Controller.TransitionSession">
            <summary>
            <c>TransitionSession</c> keeps track of the transitions made by a particular
            user during a session.  <c>TransitionSession</c>s are maintained by the
            <c>TransitionSessionManager</c>.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.TransitionSession.sessionTimer">
            <summary>
            The timer used to remove this entry from the session manager.
            </summary>
        </member>
        <member name="M:Triton.Controller.TransitionSession.Touch">
            <summary>
            Updates the time the session was last accessed to reset the time-out
            timer.
            </summary>
        </member>
        <member name="M:Triton.Controller.TransitionSession.Dispose">
            <summary>
            Frees the resources used by the <c>TransitionSession</c>.
            </summary>
        </member>
        <member name="P:Triton.Controller.TransitionSession.Trace">
            <summary>
            Gets or sets the trace of the transitions for the session.
            A trace is of the form {state}->{event}->{state}->{event}->{state}...
            </summary>
        </member>
        <member name="T:Triton.Controller.StateMachine.StopState">
            <summary>
            <b>StopState</b> identifies the end of a series of state transitions for a request.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.StateMachine.PublishableState">
            <summary>
            The <b>PublishableState</b> interface defines a State that produces
            content that can be published.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="P:Triton.Controller.StateMachine.PublishableState.Publish">
            <summary>
            Gets a boolean value indicating whether or not the state is set
            to publish its content.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.PublishableState.PublishExcludeParams">
            <summary>
            Gets a comma-delimited list of parameter names to be excluded
            from the parameters that uniquely identify the content generated
            by the state.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.PublishableState.Site">
            <summary>
            Gets the site code the state is for.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.PublishableState.Section">
            <summary>
            Gets the section the state is for.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.PublishableState.BaseFileName">
            <summary>
            Gets the base file name the published content is to be saved to.
            </summary>
        </member>
        <member name="M:Triton.Controller.StateMachine.StopState.#ctor(System.Int64,System.String)">
            <summary>
            Constructs a new <b>StopState</b> with the specified id and name.
            </summary>
            <param name="id">The ID of the state.</param>
            <param name="name">The name of the state.</param>
        </member>
        <member name="M:Triton.Controller.StateMachine.StopState.#ctor(System.Int64,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Constructs a new <b>StopState</b> with the specified values.
            </summary>
            <param name="id">The ID of the state.</param>
            <param name="name">The name of the state.</param>
            <param name="site">The site to which the state belongs.</param>
            <param name="publish">Boolean indicating whether or not the state should be published</param>
            <param name="keyExcludeParams">The names of any parameters to be excluded from the publish key.</param>
        </member>
        <member name="P:Triton.Controller.StateMachine.StopState.Publish">
            <summary>
            Gets a boolean value indicating whether or not the state is set
            to publish its content.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.StopState.PublishExcludeParams">
            <summary>
            Gets a comma-delimited list of parameter names to be excluded
            from the parameters that uniquely identify the content generated
            by the state.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.StopState.Site">
            <summary>
            Gets the site code the state is for.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.StopState.BaseFileName">
            <summary>
            Gets the base file name the published content is to be saved to.
            </summary>
        </member>
        <member name="T:Triton.Controller.Request.MvcPostedFile">
            <summary>
            <b>MvcPostedFile</b> is the interface for a client uploaded file within a request.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Request.MvcPostedFile.SaveAs(System.String)">
            <summary>
            Saves the contents of an uploaded file.
            </summary>
            <param name="fileName">The name of the saved file.</param>
        </member>
        <member name="P:Triton.Controller.Request.MvcPostedFile.Length">
            <summary>
            Gets the size in bytes of an uploaded file.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcPostedFile.Name">
            <summary>
            Gets the fully-qualified name of the file on the client's computer 
            (for example "C:\MyFiles\Test.txt").
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcPostedFile.Type">
            <summary>
            Gets the content type of a file sent by a client.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcPostedFile.InputStream">
            <summary>
            Gets a <c>Stream</c> object which points to an uploaded file to prepare 
            for reading the contents of the file.
            </summary>
        </member>
        <member name="T:Triton.Controller.PageFinder">
            <summary>
            <c>PageFinder</c> handles finding the location of the proper page
            (aspx file), master page, static content file (xml), image, etc. file
            based on the version, site, section, and filename.
            </summary>
            <remarks>
            The <c>PageFinder</c> searches for files using the following algorithm:<br/>
            1. Look for {version}/{site}/{section}/{file}.<br/>
            If the file is a page:<br/>
             2a. Look for {version}/[configuration["defaultDirName"]/{section}/{file}.<br/>
            If the file is a content:<br/>
             2b. Look for {version}/{site}/{language}/{section}/{file}.<br/>
            3. Get the site's search method.<br/>
            If search method is defaultDir:<br/>
             4a. Look for {version}/[configuration["defaultDirName"]/{file}.<br/>
            If search method is prevVersion:<br/>
             4b. Repeat search on previous version.<br/>
            <br/>
            If the master page(s) are stored in a subdirectory from where the aspx page
            is located, the relative path to the master pages directory is specified in the
            <b>masterSubPath</b> appSetting in the config file.  For example, "/masterpages".
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.PageFinder.MASTER_PAGE_PATH_CONFIG">
            <summary>
            The name of the AppSetting in the config file for the path from
            the "section" to the directory containing the master pages.
            </summary>
        </member>
        <member name="F:Triton.Controller.PageFinder.DEFAULT_LANGUAGE_DIR_NAME">
            <summary>
            The path for the site config setting where to get the default directory name
            </summary>
        </member>
        <member name="F:Triton.Controller.PageFinder.masterPagesPath">
            <summary>
            The path relative to the "section" where the master pages are stored.
            </summary>
        </member>
        <member name="M:Triton.Controller.PageFinder.#ctor">
            <summary>
            Private constructor to enforce singleton implementation.
            </summary>
        </member>
        <member name="M:Triton.Controller.PageFinder.GetInstance">
            <summary>
            Returns a refernce to the <i>Singleton</i> instance of the <c>PageFinder</c>.
            </summary>
            <returns>The <i>Singleton</i> instance of the <c>PageFinder</c>.</returns>
        </member>
        <member name="M:Triton.Controller.PageFinder.Reset">
            <summary>
            Flushes the caches to force a new page find for subsequent requests.
            </summary>
        </member>
        <member name="M:Triton.Controller.PageFinder.Reset(System.String,System.String)">
            <summary>
            Flushes the xml and page caches for the desired site/section combination to force a new page find for subsequent requests.
            </summary>
        </member>
        <member name="M:Triton.Controller.PageFinder.ResetCache(System.String,System.String,Triton.Controller.PageFinder.FileType)">
            <summary>
            Flushes a cached <c>Hashtable</c> for the desired site/section combination to force a new page find for subsequent requests. 
            If section is null, the whole site will be reset.
            </summary>
        </member>
        <member name="M:Triton.Controller.PageFinder.FindPage(System.String,System.String,System.String)">
            <summary>
            Finds the page (aspx file) for the given page name, section, and site.
            </summary>
            <param name="pageName">The base name of the page to find, excluding ".aspx".</param>
            <param name="section">The name of the section the page is for.</param>
            <param name="site">The site code for the site the page is for.</param>
            <returns>A <b>FileRecord</b> containing the information on the page's location.</returns>
        </member>
        <member name="M:Triton.Controller.PageFinder.FindMasterPage(System.String,System.String,System.String)">
            <summary>
            Finds the master page (.master file) for the given name, section, and site.
            </summary>
            <param name="pageName">The base name of the master page to find, excluding ".master".</param>
            <param name="section">The name of the section the page is for.</param>
            <param name="site">The site code for the site the page is for.</param>
            <returns>A <b>FileRecord</b> containing the information on the master page's location.</returns>
        </member>
        <member name="M:Triton.Controller.PageFinder.FindPage(System.String,System.String,System.String,System.String)">
            <summary>
            Finds the page (aspx file) for the given page name, section, and site.
            </summary>
            <param name="pageName">The base name of the page to find, excluding ".aspx".</param>
            <param name="section">The name of the section the page is for.</param>
            <param name="site">The site code for the site the page is for.</param>
            <param name="extension">The file extension of the file to find (including ".").</param>
            <returns>A <b>FileRecord</b> containing the information on the page's location.</returns>
        </member>
        <member name="M:Triton.Controller.PageFinder.FindXml(System.String,System.String,System.String)">
            <summary>
            Finds the XML file containing the static content for the given page name,
            section, and site.
            </summary>
            <param name="pageName">The base name of the page to find the xml file
            for, excluding the file extension.</param>
            <param name="section">The name of the section the page is for.</param>
            <param name="site">The site code for the site the page is for.</param>
            <returns>The full path to the XML file containing the static content
            for the page.</returns>
        </member>
        <member name="M:Triton.Controller.PageFinder.FindFile(System.String,System.String,System.String,System.Int32,System.String,Triton.Controller.PageFinder.FileType)">
            <summary>
            Finds the appropriate file based on version, site, and section.
            </summary>
            <remarks>
            
            </remarks>
            <param name="fileName">The name of the file to find, including extension.</param>
            <param name="section">The section of the site the file is for.</param>
            <param name="site">The site the file is for.</param>
            <param name="version">The version of the site the file is for.</param>
            <param name="rootPath">The relative path from the application root to
            		the directory to search for the file.</param>
            <param name="type">The<c>FileType</c> of the file.</param>
            <returns>A <c>FileRecord</c> containing the information on the file located,
            		or <c>null</c> if no file was found.</returns>
        </member>
        <member name="M:Triton.Controller.PageFinder.FileExists(Triton.Controller.PageFinder.FileRecord)">
            <summary>
            Determines if the given file exists.
            </summary>
            <param name="fileRec">A <b>FileRecord</b> containing the file information 
            		to check the existance of.</param>
            <returns>True if the file exists, false if not.</returns>
        </member>
        <member name="M:Triton.Controller.PageFinder.InitCache">
            <summary>
            Initializes the caches used by PageFinder.  This clears any previously
            cached values and re-creates the caches.
            </summary>
        </member>
        <member name="T:Triton.Controller.PageFinder.FileRecord">
            <summary>
            <c>FileRecord</c> defines attributes about a file that <c>PageFinder</c>
            locates.
            </summary>
        </member>
        <member name="T:Triton.Controller.ContentProviderFactory">
            <summary>
            <b>ContentProviderFactory</b> is the Factory class for making <b>ContentProviders</b>.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.ContentProviderFactory.CONTENT_PROVIDER_ATTRIBUTE">
            <summary>
            The name of the attribute onthe start state of the TransitionContext to use
            to get the name of the ContentProvider to use for rendering the results.
            </summary>
        </member>
        <member name="M:Triton.Controller.ContentProviderFactory.Make(Triton.Controller.TransitionContext)">
            <summary>
            Instantiates a new <b>ContentProvider</b> for the given conext.
            </summary>
            <param name="context">The context to make a <b>ContentProvider</b> for.</param>
            <returns>A <b>ContentProvider</b> to generate content for the given conext.</returns>
        </member>
        <member name="T:Triton.Controller.Command.CommandFactory">
            <summary>
            <b>CommandFactory</b> is the factory class for building Command instances.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.Command.CommandFactory.CONFIG_PATH">
            <summary>
            The "path" of the settings for Commands in web.config
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Triton.Controller.Command.CommandFactory.Make(Triton.Controller.Request.MvcRequest)" -->
        <member name="M:Triton.Controller.Command.CommandFactory.Make(System.String,System.String)">
            <summary>
            Makes a Command object for the given action and thing.
            </summary>
            <param name="action">The action to be performed.</param>
            <param name="thing">The thing that is the target of the action.</param>
            <returns>A <c>Command</c> for performing the requested action, or
            		<c>UnknownCommand</c> if the requested command does not exist.</returns>
        </member>
        <member name="M:Triton.Controller.Command.CommandFactory.Make(System.String)">
            <summary>
            Makes a Command object for the given action and thing.
            </summary>
            <param name="commandName">The name of the Command to make.</param>
            <returns>A <c>Command</c> for performing the requested action, or
            		<c>UnknownCommand</c> if the requested command does not exist.</returns>
        </member>
        <member name="M:Triton.Controller.Command.CommandFactory.GetType(System.String,System.String,System.String)">
            <summary>
            Gets the <b>Type</b> for the command with the given name in the specified namespace
            and assembly.
            </summary>
            <param name="nameSpace">The namespace the command class is defined in.</param>
            <param name="assemblyName">The name of the assembly the command class is defined in.</param>
            <param name="cmdName">The name of the command.</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Controller.Command.CommandFactory.Capitalize(System.String)">
            <summary>
            Capitalizes the given string.  I.e., 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Triton.Logic.SetParameterAction">
            <summary>
            <b>SetParameterAction</b> is an <c>Action</c> that sets the value of one or more request parameters.
            The name(s) and value(s) of the parameters to be set are defined in the corresponding state's
            <c>parameters</c> and/or <c>defaults</c> attributes.<p/>
            </summary>
            <remarks>
            The format of the <c>parameters</c> and <c>defaults</c> attributes is: <c>param1=val1|param2=val2...</c><br/>
            where<p/>
             <c>param1, param2</c>, etc. are the name(s) of the parameter(s) to set the values of, and<br/>
             <c>val1, val2</c>, etc. are the corresponding value(s) to be assigned to the parameter(s).<p/>
            The pipe (|) delimits different parameters.<p/>
            SetParameterAction also supports concatenating of values to a parameter's existing value, and
            dynamic parameter values.<p/>
            Concatenation of a value is signified using the "+=" operator instead of "=".<p/>
            A dynamic value is specified by placing the name of another request parameter within
            '[' and ']' delimters.  The value assigned to the parameter specified for SetParameterAction
            will be the value of the parameter whose name is included in the value section.<p/>
            <b>Examples:</b><p/>
            <c>param1=1</c> sets the parameter "param1" to the value "1".<br/>
            <c>param1=1|param2=abc</c> sets the parameter "param1" to the value "1" and parameter "param2"
            		to the value "abc".<br/>
            <c>param1+=xyz</c> appends "xyz" to the current value of "param1".<br/>
            <c>param1+=xyz|param2+=[param1]*abc</c>, assuming "param1" had a value of "1" coming in, sets
            		"param1" to "1xyz" and "param2" to "1xyz*abc"<br/>
            <p/>
            The <c>defaults</c> attribute acts like the <c>parameters</c> except it only set the parameter
            value(s) if there is not already a value for the parameter.
            <p/>
            <b>Notes:</b><p/>
            <list type="unordered">
            <item>A parameter may appear only once as parameter to set in a list of pipe-delimited parameters.</item>
            </list>
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Logic.SetParameterAction.PARAM_VALUE_REGEX">
            <summary>
            The regular expression used to parse parameter value into literal and dynamic
            components if it contains dynamic delimiters ([]).
            </summary>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.SafeDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.SafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.SafeDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.SafeDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.SafeDictionary`2.Item(`0)">
            <summary>
            Sets the <see cref="!:TValue"/> with the specified ERROR.
            </summary>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.SafeDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.AssemblyExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.AssemblyExtensions.SafeGetTypes(System.Reflection.Assembly)">
            <summary>
            Safes the get types.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.TypeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.TypeExtensions.GetGenericMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[],System.Type[])">
            <summary>
            Gets a generic method from a type given the method name, binding flags, generic types and parameter types
            </summary>
            <param name="sourceType">Source type</param>
            <param name="bindingFlags">Binding flags</param>
            <param name="methodName">Name of the method</param>
            <param name="genericTypes">Generic types to use to make the method generic</param>
            <param name="parameterTypes">Method parameters</param>
            <returns>MethodInfo or null if no matches found</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">
            <summary>
            
            </summary>
        </member>
        <member name="F:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException.ERROR_TEXT">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationTypeException">
            <summary>
            
            </summary>
        </member>
        <member name="F:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationTypeException.REGISTER_ERROR_TEXT">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationTypeException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationTypeException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationTypeException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationTypeException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="factory">The factory.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationException"/> class.
            </summary>
            <param name="registerType">Type of the register.</param>
            <param name="implementationType">Type of the implementation.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCRegistrationException"/> class.
            </summary>
            <param name="registerType">Type of the register.</param>
            <param name="implementationType">Type of the implementation.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCWeakReferenceException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCWeakReferenceException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCWeakReferenceException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCWeakReferenceException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCWeakReferenceException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCConstructorResolutionException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCConstructorResolutionException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCConstructorResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCConstructorResolutionException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCConstructorResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCConstructorResolutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCConstructorResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCConstructorResolutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCConstructorResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCAutoRegistrationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCAutoRegistrationException.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCAutoRegistrationException"/> class.
            </summary>
            <param name="registerType">Type of the register.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCAutoRegistrationException.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCAutoRegistrationException"/> class.
            </summary>
            <param name="registerType">Type of the register.</param>
            <param name="types">The types.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.NamedParameterOverloads">
            <summary>
            Name/Value pairs for specifying "user" parameters when resolving
            </summary>
        </member>
        <member name="F:Triton.Utilities.ChaosIoC.UnregisteredResolutionActions.AttemptResolve">
            <summary>
            Attempt to resolve type, even if the type isn't registered.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="F:Triton.Utilities.ChaosIoC.UnregisteredResolutionActions.Fail">
            <summary>
            Fail resolution if type not explicitly registered
            </summary>
        </member>
        <member name="F:Triton.Utilities.ChaosIoC.UnregisteredResolutionActions.GenericsOnly">
            <summary>
            Attempt to resolve unregistered type if requested type is generic
            and no registration exists for the specific generic parameters used.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ResolveOptions">
            <summary>
            Resolution settings
            </summary>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.ResolveOptions.Default">
            <summary>
            Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found)
            </summary>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.ResolveOptions.FailNameNotFoundOnly">
            <summary>
            Preconfigured option for attempting resolution of unregistered types and failing on named resolution if name not found
            </summary>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.ResolveOptions.FailUnregisteredAndNameNotFound">
            <summary>
            Preconfigured option for failing on resolving unregistered types and on named resolution if name not found
            </summary>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.ResolveOptions.FailUnregisteredOnly">
            <summary>
            Preconfigured option for failing on resolving unregistered types, but attempting unnamed resolution if name not found
            </summary>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.AutoRegister">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.AutoRegister(System.Boolean)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            </summary>
            <param name="ignoreDuplicateImplementations">Whether to ignore duplicate implementations of an interface/base class. False=throw an exception</param>
            <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCAutoRegistrationException"/>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.AutoRegister(System.Reflection.Assembly)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assembly
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assembly">Assembly to process</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.AutoRegister(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assembly
            </summary>
            <param name="assembly">Assembly to process</param>
            <param name="ignoreDuplicateImplementations">Whether to ignore duplicate implementations of an interface/base class. False=throw an exception</param>
            <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCAutoRegistrationException"/>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assemblies">Assemblies to process</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="ignoreDuplicateImplementations">Whether to ignore duplicate implementations of an interface/base class. False=throw an exception</param>
            <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCAutoRegistrationException"/>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register(System.Type)">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <param name="registerImplementation">Type to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register(System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <param name="registerImplementation">Type to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register(System.Type,System.Type)">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register(System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerImplementation">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register(System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerImplementation">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register(System.Type,System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register(System.Type,System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``1">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <typeparam name="RegisterImplementation">Type to register</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``1(System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <typeparam name="RegisterImplementation">Type to register</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``2">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``2(System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``1(``0)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterImplementation">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``1(``0,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterImplementation">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``2(``1)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``2(``1,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``1(System.Func{Triton.Utilities.ChaosIoC.ChaosIoCContainer,Triton.Utilities.ChaosIoC.NamedParameterOverloads,``0})">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Register``1(System.Func{Triton.Utilities.ChaosIoC.ChaosIoCContainer,Triton.Utilities.ChaosIoC.NamedParameterOverloads,``0},System.String)">
            <summary>
            Creates/replaces a named container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registation</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterMultiple``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <typeparam name="RegisterType">Type that each implementation implements</typeparam>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterMultiple(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <param name="registrationType">Type that each implementation implements</param>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve(System.Type)">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <returns>Instance of type</returns>
            <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve(System.Type,Triton.Utilities.ChaosIoC.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve(System.Type,System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve(System.Type,System.String,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve(System.Type,Triton.Utilities.ChaosIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve(System.Type,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve(System.Type,System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve(System.Type,System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve``1">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <returns>Instance of type</returns>
            <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve``1(Triton.Utilities.ChaosIoC.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve``1(System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve``1(System.String,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve``1(Triton.Utilities.ChaosIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve``1(Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve``1(System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Resolve``1(System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Triton.Utilities.ChaosIoC.ChaosIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve(System.Type)">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve(System.Type,System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve(System.Type,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve(System.Type,System.String,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve(System.Type,Triton.Utilities.ChaosIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve(System.Type,System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve(System.Type,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve(System.Type,System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve``1">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve``1(System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve``1(Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve``1(System.String,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve``1(Triton.Utilities.ChaosIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve``1(System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve``1(Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CanResolve``1(System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve(System.Type,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve(System.Type,Triton.Utilities.ChaosIoC.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the given options
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve(System.Type,System.String,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options and given name
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve(System.Type,System.String,Triton.Utilities.ChaosIoC.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the given options and name
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve(System.Type,Triton.Utilities.ChaosIoC.NamedParameterOverloads,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options and supplied constructor parameters
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve(System.Type,System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve(System.Type,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the supplied options and constructor parameters
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve(System.Type,System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve``1(``0@)">
            <summary>
            Attemps to resolve a type using the default options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve``1(Triton.Utilities.ChaosIoC.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the given options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve``1(System.String,``0@)">
            <summary>
            Attemps to resolve a type using the default options and given name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve``1(System.String,Triton.Utilities.ChaosIoC.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the given options and name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve``1(Triton.Utilities.ChaosIoC.NamedParameterOverloads,``0@)">
            <summary>
            Attemps to resolve a type using the default options and supplied constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve``1(System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads,``0@)">
            <summary>
            Attemps to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve``1(Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the supplied options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.TryResolve``1(System.String,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.ResolveAll(System.Type,System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <param name="ResolveType">Type to resolveAll</param>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.ResolveAll(System.Type)">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <param name="ResolveType">Type to resolveAll</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.ResolveAll``1(System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.ResolveAll``1">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.BuildUp(System.Object)">
            <summary>
            Attempts to resolve all public property dependencies on the given object.
            </summary>
            <param name="input">Object to "build up"</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.BuildUp(System.Object,Triton.Utilities.ChaosIoC.ResolveOptions)">
            <summary>
            Attempts to resolve all public property dependencies on the given object using the given resolve options.
            </summary>
            <param name="input">Object to "build up"</param>
            <param name="resolveOptions">Resolve options to use</param>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.ChaosIoCContainer.Current">
            <summary>
            Lazy created Singleton instance of the container for simple scenarios
            </summary>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions">
            <summary>
            Registration options for "fluent" API
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions.#ctor(Triton.Utilities.ChaosIoC.ChaosIoCContainer,Triton.Utilities.ChaosIoC.ChaosIoCContainer.TypeRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:ChaosIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:ChaosIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions.WithWeakReference">
            <summary>
            Make registration hold a weak reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:ChaosIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions.WithStrongReference">
            <summary>
            Make registration hold a strong reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:ChaosIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions.UsingConstructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Usings the constructor.
            </summary>
            <typeparam name="RegisterType">The type of the egister type.</typeparam>
            <param name="constructor">The constructor.</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions.ToCustomLifetimeManager(Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions,Triton.Utilities.ChaosIoC.ChaosIoCContainer.IChaosIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">RegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>RegisterOptions</returns>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.MultiRegisterOptions">
            <summary>
            Registration options for "fluent" API when registering multiple implementations
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.MultiRegisterOptions.#ctor(System.Collections.Generic.IEnumerable{Triton.Utilities.ChaosIoC.ChaosIoCContainer.RegisterOptions})">
            <summary>
            Initializes a new instance of the MultiRegisterOptions class.
            </summary>
            <param name="registerOptions">Registration options</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.MultiRegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:ChaosIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.MultiRegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>MultiRegisterOptions</returns>
            <exception cref="!:ChaosIoCInstantiationTypeException"></exception>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.IChaosIoCObjectLifetimeProvider">
            <summary>
            Provides custom lifetime management for ASP.Net per-request lifetimes etc.
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.IChaosIoCObjectLifetimeProvider.GetObject">
            <summary>
            Gets the stored object if it exists, or null if not
            </summary>
            <returns>Object instance or null</returns>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.IChaosIoCObjectLifetimeProvider.SetObject(System.Object)">
            <summary>
            Store the object
            </summary>
            <param name="value">Object to store</param>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.IChaosIoCObjectLifetimeProvider.ReleaseObject">
            <summary>
            Release the object
            </summary>
        </member>
        <member name="M:Triton.Utilities.ChaosIoC.ChaosIoCContainer.ObjectFactoryBase.GetObject(Triton.Utilities.ChaosIoC.ChaosIoCContainer,Triton.Utilities.ChaosIoC.NamedParameterOverloads,Triton.Utilities.ChaosIoC.ResolveOptions)">
            <summary>
            Create the type
            </summary>
            <param name="container">Container that requested the creation</param>
            <param name="parameters">Any user parameters passed</param>
            <returns></returns>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.ChaosIoCContainer.ObjectFactoryBase.AssumeConstruction">
            <summary>
            Whether to assume this factory sucessfully constructs its objects
            
            Generally set to true for delegate style factories as CanResolve cannot delve
            into the delegates they contain.
            </summary>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.ChaosIoCContainer.ObjectFactoryBase.CreatesType">
            <summary>
            The type the factory instantiates
            </summary>
        </member>
        <member name="P:Triton.Utilities.ChaosIoC.ChaosIoCContainer.ObjectFactoryBase.Constructor">
            <summary>
            Constructor to use, if specified
            </summary>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.MultiInstanceFactory`2">
            <summary>
            IObjectFactory that creates new instances of types for each resolution
            </summary>
            <typeparam name="RegisterType">Registered type</typeparam>
            <typeparam name="RegisterImplementation">Type to construct to fullful request for RegisteredType</typeparam>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.DelegateFactory`1">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            </summary>
            <typeparam name="RegisterType">Registered type to be constructed</typeparam>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.WeakDelegateFactory`1">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            
            Holds the delegate using a weak reference
            </summary>
            <typeparam name="RegisterType">Registered type to be constructed</typeparam>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.InstanceFactory`2">
            <summary>
            Stores an particular instance to return for a type
            </summary>
            <typeparam name="RegisterType">Registered type</typeparam>
            <typeparam name="RegisterImplementation">Type of the instance</typeparam>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.WeakInstanceFactory`2">
            <summary>
            Stores an particular instance to return for a type
            
            Stores the instance with a weak reference
            </summary>
            <typeparam name="RegisterType">Registered type</typeparam>
            <typeparam name="RegisterImplementation">Type of the instance</typeparam>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.SingletonFactory`2">
            <summary>
            A factory that lazy instantiates a type and always returns the same instance
            </summary>
            <typeparam name="RegisterType">Registered type</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate</typeparam>
        </member>
        <member name="T:Triton.Utilities.ChaosIoC.ChaosIoCContainer.CustomObjectLifetimeFactory`2">
            <summary>
            A factory that offloads lifetime to an external lifetime provider
            </summary>
            <typeparam name="RegisterType">Registered type</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate</typeparam>
        </member>
        <member name="T:Triton.Utilities.SortedList">
            <summary>
            SortedList maintains a list of objects that can be sorted.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Utilities.BaseList">
            <summary>
            Abstract definition for a list.  Subclasses should override <code>add</code> 
            and <code>get</code> methods to enforce type checking.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Utilities.BaseList.theList">
            The base object used for maintaining the list.
        </member>
        <member name="T:Triton.Model.Dao.IGenericDao">
            <summary>
            The <b>IGenericDao</b> interface defines the interface for a Dao that is not
            tied to a particular table or set of tables.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Model.Dao.IGenericDao.GetData(System.String)">
            <summary>
            Retrieves data from one or multiple sources based on configuration.
            </summary>
            <param name="xml">string of xml-formatted data</param>
            <returns>DataSet</returns>
            <remarks>
            The xml format should be as follows:
            <Select name="" connectionType="">
            	<Fields>
            		prefix field names with their table name as tablename.fieldname
            		<Field name=""/>
            		...
            	</Fields>
            	<Tables>
            		main table
            	<Table name="content"/>
            		joins
            		<Table name="">
            			<Join type="[JOIN|OUTER JOIN|etc.]">
            				<Operator name="and">
            					<Operator name="ea">
            						if this is not a literal comparison, include the table name for the field
            						<Field name="" literal="[true|false]">/// </Field>
            					</Operator>
            				</Operator>
            			</Join>
            		</Table>
            		...
            	</Tables>
            	<Where>
            		<Operator name="[and|or|not]">
            			<Operator name="ea">
            				if this is not a literal comparison, include the table name for the field
            				<Field name="content.site_id" literal="">/// </Field>
            			</Operator>
            			...
            		</Operator>
            	</Where>
            	<OrderBy>
            		include the table name for the field's name attribute value
            		<Field name="cma_content_status_report.[sortField]" direction="[ASC|DESC]"/>
            	</OrderBy>
            </Select>
            </remarks>
        </member>
        <member name="M:Triton.Model.Dao.IGenericDao.GetData(System.Xml.XmlNode)">
            <summary>
            Retrieves data from numerous sources based on configuration.
            </summary>
        </member>
        <member name="M:Triton.Model.Dao.IGenericDao.SaveData(System.String)">
            <summary>
            Saves data to the permanent store.  <b>SaveData</b> operates only on
            a single table -- it cannot save to multiple tables at one time.
            <b>SaveData</b> can either update existing data, or insert new data.
            </summary>
            <remarks>
            The XML given as input to <b>SaveData</b>is of the following format.
            For inserting new data:
            <pre>
            <Insert table="">
            	<Row>
            		<Fields>
            			<Field name=""></Field>
            			...
            			<Null>
            				<Field name="" />
            			</Null>
            		</Fields>
            	</Row>
            	...
            </Insert>
            </pre>
            <p>For updating existing data:</p>
            <pre>
            <Update table="">
            	<Fields>
            		<Field name=""></Field>
            		...
            		<Null>
            			<Field name="" />
            		</Null>
            	</Fields>
            	<Where>
            		...
            	</Where>
            </Update>
            </pre>
            </remarks>
            <param name="xml">The XML definition of the data to save to the permanent
            		store.</param>
        </member>
        <member name="P:Triton.Model.Dao.IGenericDao.SetIdentity">
            <summary>
            A flag for setting indentity insert
            </summary>
        </member>
        <member name="T:Triton.Model.Dao.IDao">
            <summary>
            The <b>IDao</b> defines the interface for implementing a Dao (Data Access Object)
            for the system.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Logging.DBLogHandler">
            <summary>
            Summary description for DBLogHandler.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Logging.DBLogHandler.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>Call the base constructor.</remarks>
            <returns><c>DBLogHandler</c> object</returns>
        </member>
        <member name="M:Triton.Logging.DBLogHandler.#ctor(Triton.Logging.MessageLevel)">
            <summary>
            Constructor.
            </summary>
            <remarks>Call the base constructor.</remarks>
            <param name="level"><c>MessageLevel</c> of <c>LogHandler</c>.</param>
            <returns><c>DBLogHandler</c> object</returns>
        </member>
        <member name="M:Triton.Logging.DBLogHandler.Publish(Triton.Logging.LogMessage)">
            <summary>
            Pushes the message info to a database table entry
            </summary>
            <param name="message"><c>LogMessage</c> that is to be sent to the database</param>
        </member>
        <member name="M:Triton.Logging.DBLogHandler.GetDBConnection">
            <summary>
            Abstract method to return a database connection
            </summary>
            <remarks>Store the connection as the <c>conn</c> class variable. This will allow the other
            abstract classes to use it directly.</remarks>
        </member>
        <member name="M:Triton.Logging.DBLogHandler.OpenDBConnection">
            <summary>
            Abstract method to open the database connection
            </summary>
            <remarks>Use the connection stored in the <c>conn</c> class variable. Make sure to check
            for null instances before opening.</remarks>
        </member>
        <member name="M:Triton.Logging.DBLogHandler.CreateDBCommand(Triton.Logging.LogMessage)">
            <summary>
            Abstract method to create the database command for storing the log entry in the database
            </summary>
            <param name="message"><c>LogMessage</c> to be stored</param>
            <returns><c>IDbCommand</c> populated with the necessary information to save the log entry
            to the database</returns>
            <remarks>Use the connection stored in the <c>conn</c> class variable. Make sure to check
            for null instances before creating the command.</remarks>
        </member>
        <member name="M:Triton.Logging.DBLogHandler.WriteLog(System.Data.IDbCommand)">
            <summary>
            Abstract method to store the log entry in the database
            </summary>
            <param name="cmd"><c>IDbCommand</c> previously populated by a call to
            <c>CreateDBCommand</c></param>
        </member>
        <member name="M:Triton.Logging.DBLogHandler.Flush">
            <summary>
            Flushes buffered messages to the database. Override this method if you need to process the
            message storage using transactions.
            </summary>
        </member>
        <member name="M:Triton.Logging.DBLogHandler.Close">
            <summary>
            Close the database connection
            </summary>
        </member>
        <member name="T:Triton.Controller.Utilities.WebUtilities">
            <summary>
            Utility/helper class for web/http support.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Utilities.WebUtilities.GetIP(System.Web.HttpRequest)">
            <summary>
            Gets the IP address of the client from which the given request originated.
            </summary>
            <remarks>
            This is basically to handle the problem introduced by Netscaler where it
            alters the REMOTE_ADDR header (Request's UserHostAddress property), and
            places the IP address in the HTTP_CLIENT_IP header.
            </remarks>
            <param name="request">The <b>HttpRequest</b> to get the origin IP of.</param>
            <returns>The IP address of the client from which the given request originated</returns>
        </member>
        <member name="M:Triton.Controller.Utilities.WebUtilities.GetIP(Triton.Controller.Request.MvcRequest)">
            <summary>
            Gets the IP address of the client from which the given request originated.
            </summary>
            <remarks>
            This is basically to handle the problem introduced by Netscaler where it
            alters the REMOTE_ADDR header (Request's UserHostAddress property), and
            places the IP address in the HTTP_CLIENT_IP header.
            </remarks>
            <param name="request">The <b>MvcRequest</b> to get the origin IP of.</param>
            <returns>The IP address of the client from which the given request originated</returns>
        </member>
        <member name="M:Triton.Controller.Utilities.WebUtilities.GetUserName(System.Web.HttpRequest)">
            <summary>
            Gets the logon user of the client request.
            </summary>
            <param name="request">The <c>HttpRequest</c> to get the user name from.</param>
            <returns><c>string</c> The logon user of the client request.</returns>
        </member>
        <member name="M:Triton.Controller.Utilities.WebUtilities.HasValue(System.Web.HttpRequest,System.String)">
            <summary>
            Determines if the <c>fieldName</c> item in <c>request</c> has a value or not. The item has a
            value if it is not <c>NULL</c> and a length > 0.
            </summary>
            <param name="request"><c>HttpRequest</c> object containing the item to check</param>
            <param name="fieldName"><c>String</c> containing the item name to check</param>
            <returns><c>True</c> if the item specified by <c>fieldName</c> is not <c>NULL</c> and has a
            length > 0, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Triton.Controller.Utilities.WebUtilities.HasValue(Triton.Controller.Request.MvcRequest,System.String)">
            <summary>
            Determines if the <c>fieldName</c> item in <c>request</c> has a value or not. The item has a
            value if it is not <c>NULL</c> and a length > 0.
            </summary>
            <param name="request"><c>HttpRequest</c> object containing the item to check</param>
            <param name="fieldName"><c>String</c> containing the item name to check</param>
            <returns><c>True</c> if the item specified by <c>fieldName</c> is not <c>NULL</c> and has a
            length > 0, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Triton.Controller.TimerModule">
            <summary>
            <b>TimerModule</b> is an HttpModule that tracks the amount of time a request
            takes to process.
            </summary>
            <remarks>
            <b>TimerModule</b> attaches to the application BeginRequest and EndRequest
            events.  On BeginRequest, it creates and starts a MvcTimer and attaches it
            to the request.  On EndRequest, it retrieves the MvcTimer from the request
            and includes the elapsed time in the request response.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.TimerModule.TIMER_NAME">
            <summary>
            The name of the request Item to store the timer as.
            </summary>
        </member>
        <member name="M:Triton.Controller.TimerModule.Init(System.Web.HttpApplication)">
            <summary>
            Implementation of IHttpModule.Init.  Sets the event handlers for BeginRequest
            and EndRequest to start and stop the timer.
            </summary>
            <param name="app">The HttpApplication processing the request.</param>
        </member>
        <member name="M:Triton.Controller.TimerModule.Dispose">
            <summary>
            Implementation of IHttpModule.Dispose.  No unmanaged code that needs disposing.
            </summary>
        </member>
        <member name="M:Triton.Controller.TimerModule.StartTimer(System.Object,System.EventArgs)">
            <summary>
            The event handler for the BeginRequest event. Creates a new MvcTimer, 
            starts it, and attaches it to the current request.
            </summary>
            <param name="s">The application the event is for.</param>
            <param name="e">unused</param>
        </member>
        <member name="M:Triton.Controller.TimerModule.StopTimer(System.Object,System.EventArgs)">
            <summary>
            The event handler for the EndRequest event. Gets the MvcTimer from the
            request, stops it, and write the elapsed time to the response.
            </summary>
            <param name="s">The application the event is for.</param>
            <param name="e">unused</param>
        </member>
        <member name="T:Triton.Controller.Publish.Publisher">
            <summary>
            <b>Publisher</b> is a facade for the content publishing system.  All requests to the
            publishing systems are made via the <b>Publisher</b>.  
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.Dispose">
            <summary>
            Frees the resources used by the Publisher.
            </summary>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.GetPublisher(System.String)">
            <summary>
            Gets a <b>Publisher</b> with the given name, as identified in the configuration.
            </summary>
            <param name="name">The name of the Publisher to get.</param>
            <returns>A <b>Publisher</b> with the given name.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.MakeKey(Triton.Controller.TransitionContext)">
            <summary>
            Generates a key for the publishing system based on the given context.
            </summary>
            <param name="context">The context to generate a key for.</param>
            <returns>A publish key for the given context.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.UsePublishedContent(System.String,Triton.Controller.TransitionContext)">
            <summary>
            Determines whether or not previously published content should be used
            to filfull the given request.
            </summary>
            <param name="key">The publish key of the request.</param>
            <param name="context">The <c>TransitionContext</c> to determine published
            	content use for.</param>
            <returns><c>True</c> if published content should be used, <c>false</c> if not.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.ShouldBePublished(Triton.Controller.TransitionContext)">
            <summary>
            Determines if the content fulfilling the given context's request should be published.
            </summary>
            <param name="context">The context of the request the content is for.</param>
            <returns><b>True</b> if the content should be published, <b>false</b> if not.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.IsPublished(System.String)">
            <summary>
            Determines if the content for the given publish key is published.
            </summary>
            <param name="key">The key to identify the publish content.</param>
            <returns><b>True</b> if there is published content for the given key,
            		<b>false</b> if not.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.IsExpired(Triton.Controller.Publish.PublishRecord)">
            <summary>
            Determines if the published content for the given <b>PublishRecord</b> is expired.
            </summary>
            <param name="publishRecord">The <b>PublishRecord</b> to check the expiration for.</param>
            <returns><b>True</b> if the content is expired, <b>false</b> if not.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.GetPublishRecord(System.String)">
            <summary>
            Gets the PublishRecord for the given key.
            </summary>
            <param name="key">The key to get the PublishRecord for.</param>
            <returns>The PublishRecord for the given key, or null if the key is not found.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.GetPublishRecord(System.String,Triton.Controller.TransitionContext,System.Boolean)">
            <summary>
            Gets the PublishRecord for the given key, creating a new PublishRecord if one does
            not already exist for the given key and addIfNotPresent is true.
            </summary>
            <param name="key">The key to get the PublishRecord for.</param>
            <param name="context">The context of the originating request.</param>
            <param name="addIfNotPresent">If <b>true</b> a  new PublishRecord is created if
            		one is not found matching the given key.</param>
            <returns>The PublishRecord for the given key.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.Publish(System.Object,Triton.Controller.TransitionContext)">
            <summary>
            Publishes the given content for the given context.
            </summary>
            <param name="content">The content to publish.</param>
            <param name="context">The context of the request.</param>
            <returns>A <b>string</b> containting the content to return to the calling client.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.Publisher.MakePublisher(System.String)">
            <summary>
            Factory method for constructing Publishers.
            </summary>
            <param name="name">The name of the publisher to make.</param>
            <returns>A <b>Publisher</b> of the named type.</returns>
        </member>
        <member name="P:Triton.Controller.Publish.Publisher.Name">
            <summary>
            Gets the name of the Publisher.
            </summary>
        </member>
        <member name="T:Triton.Utilities.Reflection.ReflectionUtilities">
            <summary>
            ReflectionUtilities is a utility class with useful methods for reflection support.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Utilities.Reflection.ReflectionUtilities.HasMethod(System.Object,System.String,System.Type[])">
            <summary>
            Determines if the given object has a method with the specified name and
            parameter types.
            </summary>
            <param name="obj">The object to check for the existance of the method.</param>
            <param name="methodName">The name of the method to check for.</param>
            <param name="types">The type(s) of the parameters of the method to check for.</param>
            <returns><b>True</b> if the object has the specified method, <b>false</b>
            		if not.</returns>
        </member>
        <member name="M:Triton.Utilities.Reflection.ReflectionUtilities.GetMethod(System.Object,System.String,System.Type[])">
            <summary>
            Get the method of the given object with the specified name and
            parameter types.
            </summary>
            <param name="obj">The object to get the method for.</param>
            <param name="methodName">The name of the method to get.</param>
            <param name="types">The type(s) of the parameters of the method to get.</param>
            <returns>The <b>MethodInfo</b> of the specified method, or <b>null</b> if
            		the method is not found in the given object.</returns>
        </member>
        <member name="M:Triton.Utilities.Reflection.ReflectionUtilities.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Calls the specified method of the given object, if it exists, and retruns
            the value returned by the called method.
            </summary>
            <param name="obj">The object to call the method on.</param>
            <param name="methodName">The name of the method to call.</param>
            <param name="parms">The parameter(s) to pass to the method.</param>
            <returns>The value returned by the called method.</returns>
        </member>
        <member name="M:Triton.Utilities.Reflection.ReflectionUtilities.Deserialize(System.Object,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Deserializes an object by setting it's properties based on the names and
            values specified in the given <b>NameValueCollection</b>.
            </summary>
            <remarks>
            The names in the NameValueCollection are the names of the properties to be
            set.  Property names are assumed to start with an uppercase letter but after
            that the case fo the name in the NameValueCollection must match the property.
            </remarks>
            <param name="obj">The object to be deserialized.</param>
            <param name="attributes">A <b>NameValueCollection</b> containing the names of
            the properties to set and the values to set them to.</param>
        </member>
        <member name="T:Triton.Support.Collections.CacheType">
            <summary>
            Defines the different types of caches that can be created.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Support.Collections.CacheType.ABSOLUTE_EXPIRATION">
            <summary>
            An <b>ABSOLUTE_EXPIRATION</b> cache expires all items in the 
            cache at a specified point in time.
            </summary>
        </member>
        <member name="F:Triton.Support.Collections.CacheType.RELATIVE_EXPIRATION">
            <summary>
            A <b>RELATIVE_EXPIRATION</b> cache expires items from the cache
            a specified amount of time after they were added.
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.CacheItemRemovedCallback">
            <summary>
            The <b>CacheItemRemovedCallback</b> delegate defines a callback method 
            for notifying applications when a cached item is removed from the cache.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Support.Collections.Cache">
            <summary>
            The <b>Cache</b> is a keyed collection of objects where the objects in the
            collection are automatically removed at a specified time or interval.
            </summary>
            <remarks>
            A <b>Cache</b> can be set up in one of two modes, <b>relative</b> or <b>absolute</b>.
            In an absolute Cache all items in the cache expire at a specified time of day.
            In a relative Cache items expire at some amount of time after they were added.
            <p></p>
            A relative Cache supports the <i>keep alive</i> option.  <i>Keep alive</i> resets the
            clock for an item's expiration each time it is used.  This affectively changes the 
            definition of the time interval specified for expiring objects to be from the last time
            used rather than from the time it was added.
            <p></p>
            A relative Cache that is set to <i>keep alive</i> can also be set to expire items
            after a certain amount of time regardless of when they were last used.  This is the
            <i>drop dead</i> time.  The <i>drop dead</i> must be greater than the regular
            expiration time.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Support.Collections.Cache.#ctor(System.TimeSpan,System.TimeSpan,Triton.Support.Collections.CacheType)">
            <summary>
            Constructs a <b>Cache</b> of the specified type with the given check
            interval and item expire time.
            </summary>
            <remarks>
            A Cache constructed in this manner does not include the keep-alive option.
            </remarks>
            <param name="checkInterval">The inteval at which to check the cache for expired items.</param>
            <param name="expireTime">The time or interval at which items expire from the cache.</param>
            <param name="type">The type of cache to construct.</param>
        </member>
        <member name="M:Triton.Support.Collections.Cache.#ctor(System.TimeSpan,System.TimeSpan,Triton.Support.Collections.CacheType,System.Boolean)">
            <summary>
            Constructs a <b>Cache</b> of the specified type with the given check
            interval, item expire time, and keep-alive settings.
            </summary>
            <param name="checkInterval">The inteval at which to check the cache for expired items.</param>
            <param name="expireTime">The time or interval at which items expire from the cache.</param>
            <param name="type">The type of cache to construct.</param>
            <param name="keepAlive">If <b>true</b> <i>expireTime</i> is from the last time the
            	item was access, if <b>false</b> <i>expireTime</i> is from the time the item
            	was added to the cache.</param>
        </member>
        <member name="M:Triton.Support.Collections.Cache.#ctor(System.TimeSpan,System.TimeSpan,Triton.Support.Collections.CacheType,System.Boolean,System.TimeSpan)">
            <summary>
            Constructs a <b>Cache</b> of the specified type with the given check
            interval, item expire time, keep-alive and drop dead settings.
            </summary>
            <param name="checkInterval">The inteval at which to check the cache for expired items.</param>
            <param name="expireTime">The time or interval at which items expire from the cache.</param>
            <param name="type">The type of cache to construct.</param>
            <param name="keepAlive">If <b>true</b> <i>expireTime</i> is from the last time the
            	item was access, if <b>false</b> <i>expireTime</i> is from the time the item
            	was added to the cache.</param>
            <param name="dropDeadTime">Applicable only if <i>keepAlive</i> is <b>true</b>.
            	Defines the interval from the time an item is added to the cache to when
            	it should expire, regardless of when it was last accessed.</param>
        </member>
        <member name="M:Triton.Support.Collections.Cache.Add(System.String,System.Object)">
            <summary>
            Adds an item to the cache.
            </summary>
            <param name="key">The key for the item.</param>
            <param name="val">The item to add.</param>
        </member>
        <member name="M:Triton.Support.Collections.Cache.Get(System.String)">
            <summary>
            Gets an item from the cache with the specified key.
            </summary>
            <param name="key">The key for the item to get.</param>
            <returns>The item from the cache with the given key, 
            	or null if the key does not exist in the cache.</returns>
        </member>
        <member name="M:Triton.Support.Collections.Cache.Remove(System.String)">
            <summary>
            Removes the item with the given key from the cache.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:Triton.Support.Collections.Cache.GetEnumerator">
            <summary>
            Gets an Enumerator for the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Triton.Support.Collections.Cache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.Cache.Dispose">
            <summary>
            Disposes of the cache.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.Cache.Init(System.TimeSpan,System.TimeSpan,Triton.Support.Collections.CacheType,System.Boolean,System.TimeSpan)">
            <summary>
            Initializes the cache.
            </summary>
            <param name="checkInterval">The inteval at which to check the cache for expired items.</param>
            <param name="expireTime">The time or interval at which items expire from the cache.</param>
            <param name="type">The type of cache to construct.</param>
            <param name="keepAlive">If <b>true</b> <i>expireTime</i> is from the last time the
            	item was access, if <b>false</b> <i>expireTime</i> is from the time the item
            	was added to the cache.</param>
            <param name="dropDeadTime">Applicable only if <i>keepAlive</i> is <b>true</b>.
            	Defines the interval from the time an item is added to the cache to when
            	it should expire, regardless of when it was last accessed.</param>
        </member>
        <member name="M:Triton.Support.Collections.Cache.GetExpireTime">
            <summary>
            Gets the expiration time for a new item based on the cache type
            and current time.
            </summary>
            <returns>A <b>DateTime</b> representing the time at which an item
            	being added or updated now should expire.</returns>
        </member>
        <member name="M:Triton.Support.Collections.Cache.UpdateExpireTime(Triton.Support.Collections.CacheItem)">
            <summary>
            Updates the expire time of the given item if the cache is 
            <b>RELATIVE_EXPIRATION</b> and keep-alive is on.
            </summary>
            <param name="item">The <b>CacheItem</b> to update the expire time for.</param>
        </member>
        <member name="M:Triton.Support.Collections.Cache.CheckExpirations(System.Object)">
            <summary>
            This is the TimerCallback method for the checkTimer, used to remove
            remove expired items from the cache.
            </summary>
            <param name="info">unused</param>
        </member>
        <member name="P:Triton.Support.Collections.Cache.Item(System.String)">
            <summary>
            Gets or sets the value of an item in the cache with the given key.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.Cache.Count">
            <summary>
            Gets the number of items in the cache.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.Cache.CacheType">
            <summary>
            Gets the type of the cache.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.Cache.RemoveCallback">
            <summary>
            Gets or sets the <b>CacheItemRemovedCallback</b> callback method
            called when an item is removed from the cache.
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.Cache.CacheEnumerator">
            <summary>
            Enumerates the elements of a cache.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.Cache.CacheEnumerator.#ctor(Triton.Support.Collections.Cache)">
            <summary>
            Constructs a <b>CacheEnumerator</b> for the given <b>Cache</b>.
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Triton.Support.Collections.Cache.CacheEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is 
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.Cache.CacheEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to 
            	the next element; <b>false</b> if the enumerator has passed the end 
            	of the collection.</returns>
        </member>
        <member name="P:Triton.Support.Collections.Cache.CacheEnumerator.Key">
            <summary>
            Gets the key of the current cache item.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.Cache.CacheEnumerator.Value">
            <summary>
            Gets the value of the current cache item.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.Cache.CacheEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current cache item.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.Cache.CacheEnumerator.Current">
            <summary>
            Gets the current element in the cache.
            </summary>
        </member>
        <member name="T:Triton.Logging.ILogFilter">
            <summary>
            Specifies the contract inherited filters have to follow.  Inherited classes represent special 
            conditions that can be applied to <c>Logger</c> objects to add custom validation/checking.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Logging.ILogFilter.IsLoggable(Triton.Logging.LogMessage)">
            <summary>
            Determines if the <c>LogMessage</c> allowed to pass to the data source
            </summary>
            <param name="message"><c>LogMessage</c> that is to be sent to the data source</param>
            <returns><c>bool</c> indicating if the <c>LogMessage</c> is to be sent to the data source</returns>
        </member>
        <member name="T:Triton.Controller.Request.RequestFactory">
            <summary>
            <b>RequestFactory</b> is the factory class for constructing requests that
            implement the MvcRequest interface.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Request.RequestFactory.Make(System.Web.HttpContext)">
            <summary>
            Constructs a MvcRequest of the appropriate type based on the information
            provided in the given HttpContext.
            </summary>
            <param name="httpContext">An <b>HttpContext</b> to construct a MvcRequest for.</param>
            <returns>A <b>MvcRequest</b> for the given context.</returns>
        </member>
        <member name="T:Triton.Controller.Publish.HtmlContentPublisher">
            <summary>
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.Publish.HtmlContentPublisher.EXPIRATION_SETTING">
            <summary>
            The name of the configuration setting within controllerSettings/publishing/settings for the
            expiration time (in minutes) of published pages.
            </summary>
        </member>
        <member name="F:Triton.Controller.Publish.HtmlContentPublisher.PARAMS_TO_IGNORE">
            <summary>
            The request parameters to exclude from the publisher key.
            </summary>
        </member>
        <member name="F:Triton.Controller.Publish.HtmlContentPublisher.basePath">
            <summary>
            The path to the root of the application.
            </summary>
        </member>
        <member name="F:Triton.Controller.Publish.HtmlContentPublisher.publishPath">
            <summary>
            The relative (to basePath) path to the publish directory.
            </summary>
        </member>
        <member name="M:Triton.Controller.Publish.HtmlContentPublisher.Publish(System.Object,Triton.Controller.TransitionContext,Triton.Controller.Publish.Publisher)">
            <summary>
            Publishes the content contained in the publishParam.
            </summary>
            <param name="publishParam">Contains the content to be published.</param>
            <param name="context">The Context of the request the content is being published for.</param>
            <param name="publisher">The publisher </param>
            <returns></returns>
        </member>
        <member name="M:Triton.Controller.Publish.HtmlContentPublisher.GetPublishKey(Triton.Controller.TransitionContext)">
            <summary>
            Gets the publish key for the given context.
            </summary>
            <param name="context">The context to get the publish key for.</param>
            <returns>The publish key for the given context.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.HtmlContentPublisher.ShouldBePublished(Triton.Controller.TransitionContext)">
            <summary>
            Determines if the content fulfilling the given context's request should be published.
            </summary>
            <param name="context">The context of the request the content is for.</param>
            <returns><b>True</b> if the content should be published, <b>false</b> if not.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.HtmlContentPublisher.IsExpired(Triton.Controller.Publish.PublishRecord)">
            <summary>
            Determines if the published content referenced by the given PublishRecord is expired.
            </summary>
            <param name="publishRecord">The PublishRecord to determine the expiration of.</param>
            <returns><b>True</b> if the given PublishRecord is expired, <b>false</b> if not.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.HtmlContentPublisher.GetUnicodeSequence(System.Text.RegularExpressions.Match)">
            <summary>
            This is the delegate function that is called each time a regular expression match
            is found during a Replace operation.
            </summary>
            <param name="match">The <c>Match</c> resulting from a single regular expression match during a Replace.</param>
            <returns>A <c>string</c> consisting of unicodes (represented by 2-digit fixed-length hex numbers) of the input value.</returns>
        </member>
        <member name="P:Triton.Controller.Publish.HtmlContentPublisher.Name">
            <summary>
            Gets the name of the Publisher.
            </summary>
        </member>
        <member name="T:Triton.Logic.SetRequestItemAction">
            <summary>
            <b>SetRequestItemAction</b> is an Action to set a request item to a value.
            If the value is empty string, then set the item to null
            </summary>
            <remarks>
            SetRequestItemAction accepts the following attributes:<br/>
            <b>requestItemName</b> - the name used in Request.Items for the message.  The
            					default is "response".<br/>
            <b>value</b> - the value of the item. <br/>
            </remarks>
            <author>Garun Vagidov</author>
        </member>
        <member name="M:Triton.Logic.SetRequestItemAction.Execute(Triton.Controller.TransitionContext)">
            <summary>
            Carries out the actions of the Action.
            </summary>
            <param name="context">The <b>TransitionContext</b> the Action is executing in.</param>
            <returns>A string containing the event returned by the action.</returns>
        </member>
        <member name="P:Triton.Logic.SetRequestItemAction.RequestItemName">
            <summary>
            Gets or sets the name used for the message in Request.Items.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetRequestItemAction.Value">
            <summary>
            Gets or sets the message content.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetRequestItemAction.ValueParamNameIn">
            <summary>
            Gets or sets the name of the parameter whose value is
            used for the value of the request item.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Triton.Controller.Publish.IPublisherRule" -->
        <member name="M:Triton.Controller.Publish.IPublisherRule.UsePublishedContent(Triton.Controller.TransitionContext)">
            <summary>
            Determines if published content should be used to fulfill the
            request indicated by the given <c>TransitionContext</c>.
            </summary>
            <param name="context">The <c>TransitionContext</c> to determine if
            	published content should be used for.</param>
            <returns><c>True</c> if published content should be used, <c>false</c> if not.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.IPublisherRule.ShouldBePublished(Triton.Controller.TransitionContext)">
            <summary>
            Determines if the content generated to fulfill the given request
            should be published for use in fulfilling future requests.
            </summary>
            <param name="context">The <c>TransitionContext</c> to determine if
            	content should be published for.</param>
            <returns><c>True</c> if the content should be published, <c>false</c> if not.</returns>
        </member>
        <member name="P:Triton.Controller.Publish.IPublisherRule.Name">
            <summary>
            Gets or sets the name of the <c>IPublisherRule</c>.
            </summary>
        </member>
        <member name="T:Triton.Support.Error.ErrorList">
            <summary>
            <c>ErrorList</c> maintains a collection of <c>Error</c>s.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Utilities.Xml.Xmlable">
            <summary>
            The Xmlable interface defines the interface for objects that can
            be converted to and from XML.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Support.Error.ErrorList.toXML">
             Converts the <code>ErrorList</code> XML. 
            
             @return	the <code>ErrorList</code> as XML.
        </member>
        <member name="M:Triton.Support.Error.ErrorList.Add(Triton.Support.Error.Error)">
             Appends the specified Error to the end of this list.  
            
             @param err	Error to be inserted.
            
             @return		
        </member>
        <member name="M:Triton.Support.Error.ErrorList.Add(System.Int64)">
             Appends the Error for the given ID to the list.  
            
             @param id	ID of the Error to be inserted.
            
             @return		.
        </member>
        <member name="M:Triton.Support.Error.ErrorList.Add(System.Int64,System.String[])">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Triton.Model.TransferObject">
            <summary>
            The <c>TransferObject</c> interface defines any object that is used as a
            transfer object to relay information between the different layers of the
            framework.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Model.Dao.MsDaoBase">
            <summary>
            This is the base class of all DAOs accessing an MS SQL Server system.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Model.Dao.MsDaoBase.GetConnection">
            <summary>
            Gets a database connection based on DB access information specified in web.config.
            </summary>
            <returns>A <c>IDbConnection</c> reference to a <c>SqlConnection</c> instance.</returns>
            <exception cref="T:System.ApplicationException">Throws the exception when connection string could not be found.</exception>
        </member>
        <member name="T:Triton.Controller.XmlController">
            <summary>
            <b>XmlController</b> gets incoming XML requests from IIS and delegates processing
            to the appropriate Command.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.XmlController.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes an HTTP XML request.
            </summary>
            <param name="context">An <c>HttpContext</c> object that provides
            		references to the intrinsic server objects (for example, 
            		Request, Response, Session, and Server) used to service 
            		HTTP requests.</param>
        </member>
        <member name="M:Triton.Controller.XmlController.GetCommandName(System.Xml.XmlDocument)">
            <summary>
            Gets the name of the <c>Command</c> for carrying out the given request.
            </summary>
            <param name="xml">The XML request to get the command for.</param>
            <returns>The name of the <c>Command</c> for carrying out the given request.</returns>
        </member>
        <member name="P:Triton.Controller.XmlController.IsReusable">
            <summary>
            Returns <c>true</c> if the instance is reusable, <c>false</c> otherwise.
            </summary>
        </member>
        <member name="T:Triton.Controller.StateMachine.PageState">
            <summary>
            <b>PageState</b> is a state in the state machine representing an aspx page.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.StateMachine.StartState">
            <summary>
            The <b>StartState</b> interface must be "implemented" by any concrete 
            state that can be the starting point of a series of tranistions/state processings.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="P:Triton.Controller.StateMachine.PageState.BaseFileName">
            <summary>
            Gets the base file name the published content is to be saved to.
            </summary>
        </member>
        <member name="T:Triton.Controller.Request.MvcCookie">
            <summary>
            <b>MvcCookie</b> is an adaptor for the underlying cookie implementation to adapt it
            for use with <b>MvcRequest</b>.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Request.MvcCookie.#ctor(System.String)">
            <summary>
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Triton.Controller.Request.MvcCookie.Domain">
            <summary>
            Gets or sets the domain to associate the cookie with. 
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCookie.Expires">
            <summary>
            Gets or sets the expiration date and time for the cookie.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCookie.HasKeys">
            <summary>
            Gets a value indicating whether a cookie has subkeys.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCookie.Name">
            <summary>
            Gets or sets the name of a cookie.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCookie.Path">
            <summary>
            Gets or sets the virtual path to transmit with the current cookie.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCookie.Secure">
            <summary>
            Gets or sets a value indicating whether to transmit the 
            cookie using SSL (that is, over HTTPS only).
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCookie.Value">
            <summary>
            Gets or sets an individual cookie value.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcCookie.Values">
            <summary>
            Gets a collection of key-and-value value pairs that are 
            contained within a single cookie object.
            </summary>
        </member>
        <member name="T:Triton.Controller.BaseController">
            <summary>
            <b>BaseController</b> is the base front controller for handling requests using either 
            <b>Command</b>s or <b>Action</b>s.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.BaseController.ProcessRequest(Triton.Controller.Request.MvcRequest)">
            <summary>
            Processes a request.
            </summary>
            <param name="request">The <c>MvcRequest</c> object representing the
            		request to process.</param>
        </member>
        <member name="T:Triton.Logic.ClearParameterAction">
            <summary>
            The <b>ClearParameterAction</b> clears the values of the parameter(s) specified.
            The names of the parameters to clear are specified in the <c>parameters</c>
            attribute of the action's state.
            </summary>
            <remarks>
            Only values set by the <b>SetParameterAction</b> can be cleared using
            this action.  Values that are provided in the initial request can not be cleared.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.Action.ActionFactory">
            <summary>
            Factory class to build <c>Action</c>s.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.Action.ActionFactory.CONFIG_PATH">
            <summary>
            The "path" of the settings for Actions in web.config
            </summary>
        </member>
        <member name="F:Triton.Controller.Action.ActionFactory.typeCache">
            <summary>
            The <c>Cache</c> that keeps track of found actions.
            </summary>
        </member>
        <member name="M:Triton.Controller.Action.ActionFactory.Make(System.String)">
            <summary>
            Instantiates the <b>Action</b> with the given name, if available.
            </summary>
            <param name="actionName">The name of the Action to instantiate.</param>
            <returns>The <b>Action</b> with the specified name, or <b>null</b> if no
            Action with that name is found.</returns>
        </member>
        <member name="M:Triton.Controller.Action.ActionFactory.GetType(System.String,System.String,System.String)">
            <summary>
            Gets the <b>Type</b> for the action with the given name in the specified namespace
            and assembly.
            </summary>
            <param name="nameSpace">The namespace the action class is defined in.</param>
            <param name="assemblyName">The name of the assembly the action class is defined in.</param>
            <param name="actionName">The name of the action.</param>
            <returns></returns>
        </member>
        <member name="T:Triton.Controller.StateMachine.ActionState">
            <summary>
            <b>ActionState</b> is a state in the state machine system the carries out
            some unit of business logic.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.StateMachine.ActionState.SetParameters(System.String)">
            <summary>
            Sets the parameters that can be used by the <b>Action</b> when it is executed.
            </summary>
            <param name="parameters">A bar ("|") delimited list of parameters and values
            		to be set.  For example: "id=123|name=test".</param>
        </member>
        <member name="M:Triton.Controller.StateMachine.ActionState.Execute(Triton.Controller.TransitionContext)">
            <summary>
            Builds the <c>Action</c> associated with the state and executes it.
            </summary>
            <param name="context">The <c>TransitionContext</c> the state is being
            		executed in.</param>
            <returns>The event resulting from the execution of the associated <c>Action</c>.</returns>
        </member>
        <member name="T:Triton.Controller.Request.MvcPostedFileCollection">
            <summary>
            Provides access to and organizes files uploaded by a client.
            </summary>
            <remarks>
            Clients encode files and transmit them in the content body using multipart 
            MIME format with an HTTP Content-Type header of multipart/form-data. The
            system extracts the encoded file(s) from the content body into individual
            members of an MvcPostedFileCollection. Methods and properties of the MvcPostedFile 
            interface provide access to the contents and properties of each file.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Request.MvcPostedFileCollection.Add(System.String,Triton.Controller.Request.MvcPostedFile)">
            <summary>
            Adds a file with the specified key to the collection.
            </summary>
            <param name="key">The key of the entry to add. The key can be a null reference.</param>
            <param name="file">The <b>MvcPostedFile</b> value of the entry to add. The value 
            can be a null reference.</param>
        </member>
        <member name="P:Triton.Controller.Request.MvcPostedFileCollection.Item(System.Int32)">
            <summary>
            Indexer to get an individual <b>MvcPostedFile</b> object from the file 
            collection. This property is overloaded to allow retrieval of objects 
            by either name or numerical index. 
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcPostedFileCollection.Item(System.String)">
            <summary>
            Indexer to get an individual <b>MvcPostedFile</b> object from the file 
            collection. This property is overloaded to allow retrieval of objects 
            by either name or numerical index. 
            </summary>
        </member>
        <member name="T:Triton.Controller.StateMachine.StatePrerequisite">
            <summary>
            Defines a prerequisite for a <c>State</c>.
            </summary>
            <author>Scott Dyke</author>
            <created>11/18/11</created>
        </member>
        <member name="P:Triton.Controller.StateMachine.StatePrerequisite.Name">
            <summary>
            Gets or sets the (optional) name of prerequisite. 
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.StatePrerequisite.StartStateId">
            <summary>
            Gets or sets the start state ID of prerequisite. 
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.StatePrerequisite.StartEvent">
            <summary>
            Gets or sets the starting event of prerequisite. 
            </summary>
        </member>
        <member name="T:Triton.Support.Error.Error">
            <summary></summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Support.Error.Error.toXML">
             Converts the <code>Error</code> attributes to XML. 
            
             @return	the attributes of the <code>Error</code> as XML.
        </member>
        <member name="T:Triton.Controller.StateMachine.Transition">
            <summary>
            Summary description for Transition.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.StateMachine.Transition.Clone">
            <summary>
            Returns a copy of the Transition.
            </summary>
            <returns>A copy of the Transition.</returns>
        </member>
        <member name="M:Triton.Controller.StateMachine.Transition.Clone(System.Int64)">
            <summary>
            Returns a copy of the Transition with the FromState set to the given value.
            </summary>
            <returns>A copy of the Transition with the FromState set to the given value.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Triton.Controller.StateMachine.Transition.ContentProvider" -->
        <member name="T:Triton.Controller.Publish.PublishManager">
            <summary>
            PublishManager is a singleton that manages the information for publishing
            of pages.
            </summary>
            <remarks>
            PublishManager keeps track of published content information by maintaining
            a PublishPageRecord for each published content in a <c>PublishedPageCollection</c>. 
            The key for the content in the hashtable is {stateId}_{event}_{requestParams},
            where:<br></br>
              {stateId} is the ID of the state the event is fired from.<br></br>
              {event}  is the name of the event.<br></br>
              {requestParams}  is a "_"-delimited list of the <b>values</b> of the request
            			parameters identified by the <c>PublishKeyParams</c> property
            			of the transition corresponding to the event.<p>
            			
            PublishManager also maintains a hashtable of the expiration times set for
            each site.  In this hashtable the key is the site code and the value is the
            expiration time for published pages, in minutes.  The expiration time for
            each site is defined by the <c>pageExpirationTime</c> attribute in 
            sites.config</p><p>
            
            The publishedPages collection that keeps track of published pages is periodically 
            checked for expired pages by a thread timer.  The interval at which the check is 
            made is defined by the <c>pageCheckTime</c> attribute in sites.config.  This
            process removes any page references from the publishedPages were the page has
            expired.</p><p>
            
            PublishManager does not itself publish the pages.  It provides a PagePublisher,
            via the GetPublisher method, to perform the actual page publishing.  Each
            PagePublisher is coupled to the HTTP request performing the publish so
            thread safety is ensured.</p><p>
            
            The published pages are published to the appropriate sub-directory under the
            publish directory for the site and section they belong to.  The published
            file name is of the form: {event}_{requestParams}_{page},
            where:<br></br>
              {event}  is the name of the event the page is generated in response to.<br></br>
              {requestParams}  is a "_"-delimited list of the <b>values</b> of the request
            			parameters identified by the <c>PublishKeyParams</c> property
            			of the transition corresponding to the event.
              {page}  is the name of the page.</p> 
            
            
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.Publish.PublishManager.syncRoot">
            <summary>
            The name of the Logger to use to logging trace info -- used only if PUBLISH_TRACE compile
            flag is defined.  This Logger must be defined in loggers.config.
            </summary>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.GetPublishManager">
            <summary>
            Gets an instance of the <b>PublishManager</b>.
            The <b>PublishManager</b> is an instance of the class identified in the 
            configuration/controllerSettings/publishing section of web.config.
            </summary>
            <returns>An instance of a <b>PublishManager</b>.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.Reset">
            <summary>
            Resets the entire published page collection, forcing all pages to be
            re-published on next request.
            </summary>
            <returns>The number of pages affected.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.Reset(System.String)">
            <summary>
            Resets all of the published pages for the specified site, forcing the 
            pages to be re-published on next request.
            </summary>
            <returns>The number of pages affected.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.Reset(System.String[])">
            <summary>
            Resets the published pages identified in the given list, forcing the 
            pages to be re-published on next request.
            </summary>
            <returns>The number of pages affected.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.GetPublishRecord(System.String,Triton.Controller.TransitionContext,Triton.Controller.Publish.IContentPublisher,System.Boolean)">
            <summary>
            Gets the <c>PublishRecord</c> for the target page of the given
            context.
            </summary>		
            <param name="key"></param>
            <param name="context">The <c>TransitionContext</c> to get the <c>PublishRecord</c> for.</param>
            <param name="publisher">The <c>ContentPublisher</c></param>
            <param name="addIfNotPresent">If <b>true</b> adds a new <b>PublishRecord</b> 
            	to the internal collection for the given context.</param>
            <returns>The <c>PublishRecord</c> for the target page of the given context.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.CleanUpExpired(System.Object)">
            <summary>
            Processes the internal collection, removing any "pages" that have expired.
            </summary>
            <remarks>
            This is the TimerCallback delegate called by the cleanupTimer.
            </remarks>
            <param name="state">Unused.</param>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.Initialize">
            <summary>
            Initializes the <b>PublishManager</b>.
            </summary>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.InitializeTimers">
            <summary>
            Initializes the thread timers used by <b>PublishManager</b>.
            </summary>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.StorePages(System.Object)">
            <summary>
            Stores the internal collection to persistent storage.
            </summary>
            <remarks>
            This is the TimerCallback delegate called by the storeTimer.
            </remarks>
            <param name="state">Unused.</param>
        </member>
        <member name="M:Triton.Controller.Publish.PublishManager.GetPublishDao">
            <summary>
            Returns an instance of a <c>IPublishDao</c>.  The concrete class
            instantiated is defined in the web.config file.
            </summary>
            <returns>A <c>IPublishDao</c>.</returns>
        </member>
        <member name="P:Triton.Controller.Publish.PublishManager.CheckInterval">
            <summary>
            Gets the interval, in minutes, at which the collection of published content 
            is checked for expired items.
            </summary>
        </member>
        <member name="P:Triton.Controller.Publish.PublishManager.StoreInterval">
            <summary>
            Gets the interval, in minutes, at which the collection of published content is
            written to peristent storage.
            </summary>
        </member>
        <member name="T:Triton.Controller.Command.UnknownCommand">
            <summary>
            <b>UnknownCommand</b> is a "dummy" Command that does nothing.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Logic.GetAppSettingAction">
            <summary>
            Action to get a value from the appSettings of the configuration file and
            return in the specified request parameter and/or request item.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="P:Triton.Logic.GetAppSettingAction.AppSettingNameIn">
            <summary>
            Gets or sets the name of the appSetting in the config file to get.
            </summary>
        </member>
        <member name="P:Triton.Logic.GetAppSettingAction.ParamNameOut">
            <summary>
            Gets or sets the name of the request parameter to put the value of
            the appSetting into.
            </summary>
        </member>
        <member name="P:Triton.Logic.GetAppSettingAction.ItemNameOut">
            <summary>
            Gets or sets the name of in Request.Items to place the value of
            the appSetting into.
            </summary>
        </member>
        <member name="T:Triton.Utilities.StringExtensions">
            <summary>
             Helper string extensions.
            </summary>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.ToIntArray(System.String)">
            <summary>
            Converts a string containing a comma-delimited list of integer
            values to an array of <c>int</c>.
            </summary>
            <param name="str">string to convert</param>
            <returns>Array of <c>int</c></returns>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.ToIntArray(System.String,System.String)">
            <summary>
            Converts a string containing a comma-delimited list of integer
            values to an array of <c>int</c>.
            </summary>
            <param name="str">string to convert</param>
            <param name="treatAsEmpty">Character combination to ignore.</param>
            <returns>Array of <c>int</c></returns>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.ToLongArray(System.String)">
            <summary>
            Converts a string containing a comma-delimited list of integer
            values to an array of <c>long</c>.
            </summary>
            <param name="str">string to convert</param>
            <returns>Array of <c>long</c></returns>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.ToLongArray(System.String,System.String)">
            <summary>
            Converts a string containing a comma-delimited list of integer
            values to an array of <c>long</c>.
            </summary>
            <param name="str">string to convert</param>
            <param name="treatAsEmpty">Character combination to ignore.</param>
            <returns>Array of <c>long</c></returns>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.ToStringArray(System.String)">
            <summary>
            Converts a string containing a comma-delimited list of string
            values to an array of <c>string</c>.
            </summary>
            <param name="str">string to convert.</param>
            <returns>Array of <c>string</c>.</returns>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.ToStringArray(System.String,System.String)">
            <summary>
            Converts a string containing a comma-delimited list of string
            values to an array of <c>string</c>.
            </summary>
            <param name="str">string to convert.</param>
            <param name="treatAsEmpty">Character combination to ignore.</param>
            <returns>Array of <c>string</c>.</returns>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.ToGuidArray(System.String)">
            <summary>
            Converts a string containing a comma-delimited list of Guid
            values to an array of <c>Guid</c>.
            </summary>
            <param name="str">string to convert</param>
            <returns>Array of <c>Guid</c></returns>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.ToGuidArray(System.String,System.String)">
            <summary>
            Converts a string containing a comma-delimited list of Guid
            values to an array of <c>Guid</c>.
            </summary>
            <param name="str">string to convert</param>
            <param name="treatAsEmpty">Character combination to ignore.</param>
            <returns>Array of <c>Guid</c></returns>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.ToCamel(System.String,System.Char)">
            <summary>
            Extension method to format a string as camel case -- with the first letter
            of each "word" upper case and the remaining letters lower case.
            </summary>
            <param name="inputStr">The string to convert to camel case.</param>
            <param name="delimiter">The delimiter to define the words in the string.</param>
            <returns>The given string converted to camel case.</returns>
        </member>
        <member name="M:Triton.Utilities.StringExtensions.EvaluatePropertyValue(System.String)">
            <summary>
            This method will take the <b>String</b> provided and evaluate the Property/Const value.
            If no value can be discerned then the origional value is returned
            for instance "{Triton.Location.Support.Request.ParameterNames+PersistedAddress+Field.LINE1}"
            this will create a instance of the class 
            Triton.Location.Support.Request.ParameterNames.PersistedAddress.Field
            and evaluate the value for the constant field "LINE1"
            the + operators are needed when the class definition is internal to the parent class.
            so the namespace is "Triton.Location.Support.Request" and the class Parameternames has 
            an internal class PersistedAddress which has an internal class Field.
            Note: this is only usefull for constants or static Properties.
            </summary>
            <param name="request">MvcRequest</param>
            <param name="paramName">fully qualified class name</param>
            <returns>string representation</returns>
        </member>
        <member name="T:Triton.Model.Dao.MsGenericDao`1">
            <summary>
            Implements the <b>IGenericDao&lt;T&gt;</b> interface for MS SQL Server databases.
            </summary>
            <typeparam name="T">The <b>Type</b> of the object the Dao is to return.</typeparam>
            <author>Scott Dyke</author>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Triton.Model.Dao.MsGenericDao`1.GetData(System.String,System.String[],System.String[],System.Xml.XmlNode)" -->
        <member name="M:Triton.Model.Dao.MsGenericDao`1.SaveData(System.String)">
            <summary>
            
            </summary>
            <remarks>
            <pre>
            <Insert table="">
            	<Row>
            		<Fields>
            			<Field name=""></Field>
            			...
            			<Null>
            				<Field name="" />
            			</Null>
            		</Fields>
            	</Row>
            	...
            </Insert>
            
            <Update table="">
            	<Fields>
            		<Field name=""></Field>
            		...
            		<Null>
            			<Field name="" />
            		</Null>
            	</Fields>
            	<Where>
            		<Operators>
            			possible conditions take the form of:
            			<Operator name="{operatorName}">
            				<Field name=""></Field>
            			</Operator>
            			where the operatorName attribute is one of the following values:
            				ea - equal
            				lt - less than
            				gt - greater than
            				nea - not equal to
            				lea - less than or equal to
            				gea - greater than or equal to
            				and - and
            				or - or
            				not - not
            				bw - between (not supported currently)
            				
            				* and, or, and not operators can be nested
            		</Operators>
            	</Where>
            </Update>
            </pre>
            </remarks>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao`1.Delete(System.String,System.String[])">
            <summary>
            Deletes records from the specified table.
            </summary>
            <param name="tableName">The name of the table to delete records from.</param>
            <param name="conditions">The condition(s) for which records to delete.  Conditions
            		are of the form [field_name][operator][value].  For example: "id=3".
            		If <b>conditions</b> is null all records are deleted.</param>
            <returns>The number of records deleted.</returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao`1.BuildWhere(System.String[],System.Data.SqlClient.SqlCommand)">
            <summary>
            Builds the "where" clause for a sql query based on the given conditions and adds
            the corresponding parameters to the given <b>SqlCommand</b>.
            </summary>
            <remarks>
            The conditions are of the form [field_name][operator][value].  For example: "id=3",
            or "name is not null".
            </remarks>
            <param name="conditions">The conditions to build the where clause for.</param>
            <param name="cmd">The <b>SqlCommand</b> the parameters are added to.</param>
            <returns>The where clause for the given conditions.</returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao`1.GetConnection">
            <summary>
            Gets a connection to the database.
            </summary>
            <returns>An <c>SqlConnection</c> for use in communicating with the
            		database defined when this Dao was instantiated</returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao`1.FindMembersCanWriteDelegate(System.Reflection.MemberInfo,System.Object)">
            <summary>
            A <b>MemberFilter</b> delegate used by FindMembers to filter by
            member name and writable properties.
            </summary>
            <param name="memberInfo">The <b>MemberInfo</b> to filter.</param>
            <param name="searchObj">May be the name or name|type of the property to filter for.</param>
            <returns><b>True</b> the member currently being inspected matches the 
            		filter criteria, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Triton.Controller.Publish.PublishedPageCollection">
            <summary>
            <b>PublshedPageCollection</b> maintains a collection of <b>PublishRecord</b>s.
            </summary>
            <remarks>
            <b>PublshedPageCollection</b> is essentially a wrapper around a Hashtable that
            ensures type safety and provides some convenience methods/properties.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Publish.PublishedPageCollection.#ctor">
            <summary>
            Constructs an empty <b>PublishedPageCollection</b>.
            </summary>
        </member>
        <member name="M:Triton.Controller.Publish.PublishedPageCollection.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructs a <b>PublishedPageCollection</b> from the given data in XML
            format.
            </summary>
            <remarks>
            The format of the pagesXml parameter is:
            <pre>
            	<PublishedPages>
            		<Page startState="" publishedState="" key="" event="" path="" lastPublished="" />
            		...
            	</PublishedPages>
            </pre>
            </remarks>
            <param name="pagesXml">The <b>XmlDocument</b> containing the data to
            		populate the new <b>PublishedPageCollection</b> with.</param>
        </member>
        <member name="M:Triton.Controller.Publish.PublishedPageCollection.Add(System.String,Triton.Controller.Publish.PublishRecord)">
            <summary>
            Adds the given <b>PublishRecord</b> to the collection with the specified
            key.
            </summary>
            <param name="key">The key to add the <b>PublishRecord</b> under.</param>
            <param name="pubRec">The <b>PublishRecord</b> to add to the collection.</param>
        </member>
        <member name="M:Triton.Controller.Publish.PublishedPageCollection.Remove(System.String)">
            <summary>
            Removes the <b>PublishRecord</b> with the specified key from the collection.
            If no entry exists for the key, no action is taken.
            </summary>
            <param name="key">The key for the <b>PublishRecord</b> to remove.</param>
        </member>
        <member name="M:Triton.Controller.Publish.PublishedPageCollection.Clear">
            <summary>
            Removes all of the page records from the collection.
            </summary>
        </member>
        <member name="M:Triton.Controller.Publish.PublishedPageCollection.GetEnumerator">
            <summary>
            Returns an IDictionaryEnumerator that can iterate through the 
            PublishedPageCollection.
            </summary>
            <returns>An IDictionaryEnumerator that can iterate through the 
            		PublishedPageCollection.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.PublishedPageCollection.ToXml">
            <summary>
            Builds an XML representation of the collection.
            </summary>
            <remarks>
            The format of the returned XML document is:
            <pre>
            	<PublishedPages>
            		<Page startState="" publishedState="" key="" event="" path="" lastPublished="" />
            		...
            	</PublishedPages>
            </pre>
            </remarks>
            <returns></returns>
        </member>
        <member name="P:Triton.Controller.Publish.PublishedPageCollection.Item(System.String)">
            <summary>
            Gets the <b>PublishRecord</b> for the page with the given key.
            </summary>
        </member>
        <member name="P:Triton.Controller.Publish.PublishedPageCollection.Count">
            <summary>
            Gets the number of page records in the collection.
            </summary>
        </member>
        <member name="P:Triton.Controller.Publish.PublishedPageCollection.Keys">
            <summary>
            Get the list of keys of the collection.
            </summary>
        </member>
        <member name="T:Triton.Controller.FrontController">
            <summary>
            <b>FrontController</b> gets incoming requests from IIS and delegates processing
            to the appropriate Command.
            </summary>
            <remarks>
            IDEAS:
            In the DAOs, rather than always retrieving all fields, specify fields to
            be retrieved by each DAO in config file.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.FrontController.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes an HTTP Web request.
            </summary>
            <param name="context">An <c>HttpContext</c> object that provides
            		references to the intrinsic server objects (for example, 
            		Request, Response, Session, and Server) used to service 
            		HTTP requests.</param>
        </member>
        <member name="P:Triton.Controller.FrontController.IsReusable">
            <summary>
            Returns <c>true</c> if the instance is reusable, <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:Triton.Support.Request.Extensions.GetRequestItem``1(Triton.Controller.Request.MvcRequest,System.String,System.Boolean)">
            <summary>
            Gets the item with the specified name from the given <c>MvcRequest</c>'s
            Items collection.  Extracts the item from a <c>SearchResult</c> if the
            item for the given name is a <c>SearchResult&lt;T&gt;</c>.  If <c>required</c>
            is <c>true</c> an exception is thrown if there is no value in the Items
            collection for the given name, or the object is not of type <c>T</c>.
            If <c>required</c> is <c>false</c> and there is no item with the given name,
            or the item is not of type T or <c>SearchResult&lt;T&gt;</c>,
            the type's default value is returned.
            </summary>
            <typeparam name="T">The type of the object to retrieve.</typeparam>
            <param name="request">The <c>MvcRequest</c> to retrieve the item from.</param>
            <param name="itemName">The name of the item in the request's Items collection to retrieve.</param>
            <param name="required">Indicates if the requested item is "required". If <c>true</c> error
            		checking is performed to ensure that a value of the correct type is returned.</param>
            <returns>The item with the specified name from the given <c>MvcRequest</c>'s Items collection.</returns>
        </member>
        <member name="T:Triton.Utilities.MvcTimer">
            <summary>
            Summary description for MvcTimer.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Utilities.MvcTimer.#ctor">
            <summary>
            Construct a new <c>MvcTimer</c>.
            </summary>
        </member>
        <member name="M:Triton.Utilities.MvcTimer.Start">
            <summary>
            Starts the timer running.
            </summary>
        </member>
        <member name="M:Triton.Utilities.MvcTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Triton.Utilities.MvcTimer.Reset">
            <summary>
            Resets the timer so it's accumulated time is reset.
            </summary>
        </member>
        <member name="P:Triton.Utilities.MvcTimer.Time">
            <summary>
            Get the run time of the timer.  If the timer is still
            running (Stop() has not been called), it returns the 
            time since the timer was started.  If the timer has
            been stopped, it return the time is was running (from
            Start() to Stop()).
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.QueueProcessor">
            <summary>
            The <c>QueueProcessor</c> delegate defines the method to be
            called for processing of items in the queue.
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.MaxAttemptsProcessor">
            <summary>
            The <c>MaxAttemptsProcessor</c> delegate defines the method to be
            called when the # of attempts for a queue entry have been exceeded.
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.FileQueue">
            <summary>
            A <c>FileQueue</c> provides a means for queuing information to the
            file system.  
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Support.Collections.FileQueue.queueInfo">
            <summary>
            The state information for the queue.
            </summary>
        </member>
        <member name="F:Triton.Support.Collections.FileQueue.queueTimer">
            <summary>
            The timer used to periodically call the queue processing method.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.FileQueue.#ctor(System.String,System.Int32,Triton.Support.Collections.QueueProcessor)">
            <summary>
            Constructs a new <c>FileQueue</c> with the specified properties.
            </summary>
            <param name="location">The absolute path to the directory for the queue.</param>
            <param name="checkInterval">The interval, in minutes, at which to process
            		entries in the queue.</param>
            <param name="processMethod">The method to call to process entries in
            		the queue.</param>
        </member>
        <member name="M:Triton.Support.Collections.FileQueue.#ctor(Triton.Support.Collections.FileQueue.QueueInfo)">
            <summary>
            Constructs a new <c>FileQueue</c> with the properties of the given <c>QueueInfo</c>.
            </summary>
            <param name="queueInfo"></param>
        </member>
        <member name="M:Triton.Support.Collections.FileQueue.Enqueue(Triton.Support.Collections.FileQueueEntry)">
            <summary>
            Adds the given entry to the queue.
            </summary>
            <param name="entry">The entry to add to the queue.</param>
        </member>
        <member name="M:Triton.Support.Collections.FileQueue.Dequeue(Triton.Support.Collections.FileQueueEntry)">
            <summary>
            Removes the given entry from the queue.
            </summary>
            <param name="entry">The entry to remove from the queue.</param>
        </member>
        <member name="M:Triton.Support.Collections.FileQueue.CheckQueue(System.Object)">
            <summary>
            Checks the queue directory for any entries and if there are entries attempts
            to process them.  This is the method called by the <c>Timer</c> to
            periodically process the queue.
            </summary>
            <param name="stateInfo">The <c>QueueInfo</c> containing the state
            		information of the <c>FileQueue</c> from which the Timer that
            		is calling this method originated.</param>
        </member>
        <member name="M:Triton.Support.Collections.FileQueue.WriteQueueEntry(Triton.Support.Collections.FileQueueEntry)">
            <summary>
            Writes an entry to the queue.  If the entry already exists the info in the
            file is updated.  If it does not exist it is created.
            </summary>
            <param name="entry">The <c>FileQueueEntry</c> to write to the queue.</param>
        </member>
        <member name="M:Triton.Support.Collections.FileQueue.SetTimer">
            <summary>
            Sets up the <c>Timer</c> to periodically call the method to process the
            queue.  Because the timer makes a copy of the given <c>QueueInfo</c>
            changes to the properties of the queue are not reflected in the timer's
            state information.  So, whenever a property of the <c>FileQueue</c> is
            changed, the old timer must be disposed and a new one created with the
            current state info.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.FileQueue.Count">
            <summary>
            Gets a count of the number of entires currently in the queue.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.FileQueue.Location">
            <summary>
            Gets the path of the queue directory.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.FileQueue.CheckInterval">
            <summary>
            Gets the interval at which the queue is processed, in minutes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Triton.Support.Collections.FileQueue.MaxAttempts" -->
        <!-- Badly formed XML comment ignored for member "P:Triton.Support.Collections.FileQueue.MaxAttemptsHandler" -->
        <member name="T:Triton.Support.Collections.FileQueue.QueueInfo">
            <summary>
            <c>QueueInfo</c> encapsulates the properties of a <c>FileQueue</c>.
            These properties represent the state of the <c>FileQueue</c> and
            are encapsulated in this struct so the state can be given to the 
            <c>Timer</c> that periodically processes the queue, and then given
            to the processing method.  The processing method can use this
            state information to create a new <c>FileQueue</c> to perform the
            queue processing.
            </summary>
        </member>
        <member name="T:Triton.Model.Dao.MsGenericDao">
            <summary>
            <c>MsGenericDao</c> implements the <c>IGenericDao</c> for a MS SQL Server database.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.GetData(System.String)">
            <summary>
            Retrieves data by passing the loaded xml string to the overloaded method.
            </summary>
            <param name="xml">string of xml formatted data.</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.GetData(System.Xml.XmlNode)">
            <summary>
            Retrieves data based on the xml document passed in.
            </summary>
            <param name="doc">XmlDocument representing the query</param>
            <returns></returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.GetData(System.String,System.String[],System.String[])">
            <summary>
            This is just a temporary solution to meet a project deadline. 
            A more standard way of building queries will be implemented in the future.
            </summary>
            <param name="tableName"><c>string</c> - A table name (e.g. product)</param>
            <param name="fields"><c>string[]</c> - A list of table fields to be returned (e.g. product_id)</param>
            <param name="conditions"><c>conditions</c> - A list of conditions (e.g. product_number = 'C2119')</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Triton.Model.Dao.MsGenericDao.SaveData(System.String)" -->
        <member name="M:Triton.Model.Dao.MsGenericDao.GetData(System.Data.SqlClient.SqlCommand,System.String,System.String)">
            <summary>
            Performs the actual data retrieval for GetData() methods.
            </summary>
            <param name="sql"></param>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.BuildConditions(System.Xml.XmlNode,System.Data.SqlClient.SqlCommand,System.String)">
            <summary>
            Processes a given node containing conditions for a where clause or join statement.
            </summary>
            <param name="conditions">node containing the list of conditions</param>
            <param name="cmd">sql command for parameter setting</param>
            <returns>StringBuilder representing a portion, or all of the formulated condition clause.</returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.CreateCondition(System.Xml.XmlNode,System.Data.SqlClient.SqlCommand)">
            <summary>
            Appends a condition to the where/join clause based on an xml mapping, along with adding the parameter to the command if necessar.
            </summary>
            <param name="op">node containing the condition</param>
            <param name="cmd">SqlCommand</param>
            <returns>StringBuilder representing condition</returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.FormatOrderBy(System.Xml.XmlNode)">
            <summary>
            Formats a single part of an ORDER BY clause.  Adds support to order by expressions as well as simple fields.
            </summary>
            <param name="orderField"></param>
            <returns></returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.FormatFieldName(System.String)">
            <summary>
            Formats a field name so that correct aliases are used and brackets are inserted appropriately.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.GetFieldInfo">
            <summary>
            Gets information about the fields of the specified table from the database.
            </summary>
            <returns>A <c>Hashtable</c> containing the meta data about the fields of the
            		specified table, key on the field name.</returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.LoadFieldInfo(System.String)">
            <summary>
            Loads information about the fields of the specified table from the database.
            </summary>
            <param name="tableName">The name of the table to load the field information for.</param>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.GetConnection">
            <summary>
            Gets a connection to the database.
            </summary>
            <returns>An <c>SqlConnection</c> for use in communicating with the
            		database defined when this Dao was instantiated</returns>
        </member>
        <member name="M:Triton.Model.Dao.MsGenericDao.CloseConnection">
            <summary>
            Closes the database connection for the instance.
            </summary>
        </member>
        <member name="T:Triton.Logging.LogMessage">
            <summary>
            Represents a message that that needs to be logged to a data source,
            allows for message text and level.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Logging.LogMessage.#ctor">
            <summary>
            Constructor.
            </summary>
            <returns><c>LogMessage</c> object</returns>
        </member>
        <member name="M:Triton.Logging.LogMessage.#ctor(System.String,Triton.Logging.MessageLevel)">
            <summary>
            Constructor.
            </summary>
            <param name="message"><c>String</c> that specifies the name of the <c>LogMessage</c>.</param>
            <param name="level"><c>MessageLevel</c> that specifies the level of the <c>LogMessage</c>.</param>
            <returns><c>LogMessage</c> object</returns>
        </member>
        <member name="P:Triton.Logging.LogMessage.Message">
            <summary>
            Message property.
            </summary>
            <remarks>Gets/Sets the text of the LogMessage.</remarks>
            <param name="value"><c>String</c> that specifies the name of the <c>LogMessage</c>.</param>
            <returns><c>String</c> text of message.</returns>
        </member>
        <member name="P:Triton.Logging.LogMessage.Level">
            <summary>
            Level property.
            </summary>
            <remarks>Gets/Sets the level of the LogMessage.</remarks>
            <param name="value"><c>MessageLevel</c> that specifies the name of the <c>LogMessage</c>.</param>
            <returns><c>MessageLevel</c> level of message.</returns>
        </member>
        <member name="P:Triton.Logging.LogMessage.EventArg">
            <summary>
            Gets or sets the event argument for the message.  The event argument
            provides optional context information about the source of the message.
            </summary>
        </member>
        <member name="P:Triton.Logging.LogMessage.MessageTime">
            <summary>
            Gets the time the message was generated.
            </summary>
        </member>
        <member name="T:Triton.Logging.LogManager">
            <summary>
            LogManager is a Singleton.  It is used to keep track of unique Logger objects.  To retrieve a Logger
            of given name, call LogManager.GetLogManager().GetLogger(loggerName).  If found in the internal 
            Hashtable, it is returned, else null.  To add a logger to the collection, call LogManager.GetLogManager().AddLogger(Logger).
            To clear all Logger objects, call LogManager.GetLogManager().Reset().
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Logging.LogManager.GetLogManager">
            <summary>
            Returns a <c>LogManager</c> object.
            </summary>
            <returns><c>LogManager</c> instance</returns>
        </member>
        <member name="M:Triton.Logging.LogManager.AddLogger(Triton.Logging.Logger)">
            <summary>
            Adds a <c>Logger</c> object to the loggerCollection.
            </summary>
            <param name="log"><c>Logger</c> to add to the loggerCollection</param>
            <returns><c>bool</c> indicating if the <c>Logger</c> was added, if already existing, false is returned</returns>
        </member>
        <member name="M:Triton.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Returns a <c>Logger</c> object of the desired name.
            </summary>
            <param name="loggerName"><c>String</c> indicating the name of the <c>Logger</c> to return</param>
            <returns><c>Logger</c> with the requested name if available, null otherwise</returns>
        </member>
        <member name="M:Triton.Logging.LogManager.Reset">
            <summary>
            Clears the loggerCollection.
            </summary>
        </member>
        <member name="T:Triton.Controller.Publish.PublishException">
            <summary>
            <b>PublishException</b> is the Exception that gets thrown by the publishing system
            if an error occurs while publishing or referencing a published page.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Publish.PublishException.#ctor(Triton.Controller.TransitionContext,Triton.Controller.Publish.PublishRecord,System.String)">
            <summary>
            Constructs a <b>PublishException</b> for the given TransitionContext 
            and PublishRecord, with the specified message.
            </summary>
            <param name="context">The <b>TransitionContext</b> in which the exception occurred.</param>
            <param name="publishRecord">The <b>PublishRecord</b> in use at the time 
            		the exception occurred.</param>
            <param name="message">The error message to return.</param>
        </member>
        <member name="M:Triton.Controller.Publish.PublishException.#ctor(Triton.Controller.TransitionContext,Triton.Controller.Publish.PublishRecord,System.String,System.Exception)">
            <summary>
            Constructs a <b>PublishException</b> for the given TransitionContext 
            and PublishRecord, with the specified message.
            </summary>
            <param name="context">The <b>TransitionContext</b> in which the exception occurred.</param>
            <param name="publishRecord">The <b>PublishRecord</b> in use at the time 
            		the exception occurred.</param>
            <param name="message">The error message to return.</param>
            <param name="innerException">The exception that occured.</param>
        </member>
        <member name="M:Triton.Controller.Publish.PublishException.#ctor(Triton.Controller.Request.MvcRequest,Triton.Controller.Publish.PublishRecord,System.String)">
            <summary>
            Constructs a <b>PublishException</b> for the given MvcRequest 
            and PublishRecord, with the specified message.
            </summary>
            <param name="request">The <b>MvcRequest</b> in which the exception occurred.</param>
            <param name="publishRecord">The <b>PublishRecord</b> in use at the time 
            		the exception occurred.</param>
            <param name="message">The error message to return.</param>
        </member>
        <member name="M:Triton.Controller.Publish.PublishException.#ctor(Triton.Controller.Request.MvcRequest,Triton.Controller.Publish.PublishRecord,System.String,System.Exception)">
            <summary>
            Constructs a <b>PublishException</b> for the given MvcRequest 
            and PublishRecord, with the specified message.
            </summary>
            <param name="request">The <b>MvcRequest</b> in which the exception occurred.</param>
            <param name="publishRecord">The <b>PublishRecord</b> in use at the time 
            		the exception occurred.</param>
            <param name="message">The error message to return.</param>
            <param name="innerException">The exception that occured.</param>
        </member>
        <member name="T:Triton.Controller.Publish.IPublishDao">
            <summary>
            The <b>IPublishDao</b> interface defines the methods used by the page publishing
            system to save and retrieve published page data to and from the persistent
            storage.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.Publish.IPublishDao.GetPublishInfo">
            <summary>
            Reads the published page data from the persistent store.
            </summary>
            <remarks>
            GetPublishInfo returns the published page data in an <c>XmlDocument</c> in the
            following format:
            <pre>
            	<PublishedPages>
            		<Page startState="" publishedState="" key="" event="" path="" lastPublished="" />
            		...
            	</PublishedPages>
            </pre>
            </remarks>
            <returns>An <b>XmlDocument</b> containing the published page data
            		retrieved from the database.</returns>
        </member>
        <member name="M:Triton.Controller.Publish.IPublishDao.SavePublishInfo(Triton.Controller.Publish.PublishedPageCollection)">
            <summary>
            Saves the published page collection, represented as XML, to the 
            persistent store.
            </summary>
            <param name="publishInfo">An XML document containing the published page collection
            		to save to the database.</param>
        </member>
        <member name="T:Triton.Controller.Publish.PublishConfigSection">
            <summary>
            Custom configuration information for publishing system.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.Publish.SettingsElement">
            <summary>
            A ConfigurationElement for the elements in controllerSettings/publishing/settings.
            </summary>
        </member>
        <member name="T:Triton.Controller.Publish.PublisherElement">
            <summary>
            A ConfigurationElement for the elements in controllerSettings/publishing/publishers.
            </summary>
        </member>
        <member name="T:Triton.Controller.Publish.PublisherElementCollection">
            <summary>
            The collection of <b>PublisherElement</b>s.
            </summary>
        </member>
        <member name="T:Triton.Controller.Publish.PublisherRule">
            <summary>
            A ConfigurationElement for the elements in controllerSettings/publishing/publishers.
            </summary>
        </member>
        <member name="T:Triton.Controller.Publish.PublisherRuleCollection">
            <summary>
            The collection of <b>PublisherRule</b>s.
            </summary>
        </member>
        <member name="T:Triton.Controller.Publish.SettingsElementCollection">
            <summary>
            The collection of <b>SettingsElement</b>s.
            </summary>
        </member>
        <member name="T:Triton.Controller.HtmlContentProvider">
            <summary>
            <b>HtmlContentProvider</b> is the default <b>ContentProvider</b> for providing
            HTML content in response to incoming requests.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.HtmlContentProvider.Init(Triton.Controller.TransitionContext)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="context">The <b>TransitionContext</b> the provider is for.</param>
        </member>
        <member name="M:Triton.Controller.HtmlContentProvider.GetPublisher">
            <summary>
            Gets a <b>Publisher</b> for the provider.
            </summary>
            <returns>A <b>Publisher</b> for publishing HTML content.</returns>
        </member>
        <member name="M:Triton.Controller.HtmlContentProvider.GetPublishedContent(Triton.Controller.TransitionContext)">
            <summary>
            Gets the published content to fulfill the given context's request.
            </summary>
            <param name="context">The <b>TransitionContext</b> to get the published content for.</param>
            <returns>A <b>string</b> containing the content to be returned to the client.</returns>
        </member>
        <member name="M:Triton.Controller.HtmlContentProvider.RenderContent(Triton.Controller.TransitionContext)">
            <summary>
            Renders the HTML content to be returned to the client.
            </summary>
            <param name="context">The context of the request the content is being rendered for.</param>
            <returns>A <b>string</b> containing the content to be returned to the client.</returns>
        </member>
        <member name="M:Triton.Controller.HtmlContentProvider.RenderPublishContent(Triton.Controller.TransitionContext)">
            <summary>
            Renders the content to be published.
            </summary>
            <param name="context">The context of the request the content is being rendered for.</param>
            <returns>A <b>string</b> containing the content to be published.</returns>
        </member>
        <member name="M:Triton.Controller.HtmlContentProvider.Dispose">
            <summary>
            Frees resources used by the <b>HtmlContentProvider</b>.
            </summary>
        </member>
        <member name="M:Triton.Controller.HtmlContentProvider.GetPublisher(Triton.Controller.TransitionContext)">
            <summary>
            Gets a <b>Publisher</b> for the <b>HtmlContentProvider</b>.
            </summary>
            <param name="context">The context of the request the Publisher is for.</param>
            <returns>A <b>Publisher</b> for publishing HTML content.</returns>
        </member>
        <member name="T:Triton.Logic.RetrieveObjectFromSessionAction">
            <summary>
            Action to retrieve an object from session.
            </summary>
            <remarks>
            <para>Returned events:</para>
            <c>ok</c> - successfully got the object from session.<br/>
            <c>novalue</c> - no object was found in session for the given name.<br/>
            <c>error</c> - an error occurred while attempting to get the object from session.<br/>
            </remarks>
            <author>Scott Dyke</author>
            <created>3/11/10</created>
        </member>
        <member name="P:Triton.Logic.RetrieveObjectFromSessionAction.ObjectItemNameOut">
            <summary>
            Gets or sets the name in Request.Items to place the the object retrieved.
            </summary>
        </member>
        <member name="P:Triton.Logic.RetrieveObjectFromSessionAction.SessionName">
            <summary>
            Gets or sets the name of the object in session to retrieve.
            </summary>
        </member>
        <member name="T:Triton.Controller.StateMachine.StateInfo">
            <summary>
            Transfer object to return state/transition data and StateManager configuration settings
            from the DAO.
            </summary>
        </member>
        <member name="M:Triton.Controller.StateMachine.StateInfo.#ctor">
            <summary>
            Constructs an empty <b>StateInfo</b>.
            </summary>
        </member>
        <member name="M:Triton.Controller.StateMachine.StateInfo.#ctor(System.Collections.Hashtable,Triton.Controller.StateMachine.IState[])">
            <summary>
            Constructs a <b>StateInfo</b> with the given configuration settings 
            and states collection.
            </summary>
            <param name="configSettings">The configuration settings.</param>
            <param name="states">The collection of states.</param>
        </member>
        <member name="M:Triton.Controller.StateMachine.StateInfo.AddConfig(System.String,System.Object)">
            <summary>
            Adds a new configuration setting to the config settings.
            </summary>
            <param name="name">The name of the new config setting.</param>
            <param name="value">The value of the new config setting.</param>
        </member>
        <member name="P:Triton.Controller.StateMachine.StateInfo.States">
            <summary>
            Gets or sets the collection of <b>IState</b>s.
            </summary>
        </member>
        <member name="P:Triton.Controller.StateMachine.StateInfo.Config">
            <summary>
            Gets the configruation settings.
            </summary>
        </member>
        <member name="T:Triton.Utilities.Db.DbUtilities">
            <summary>
            This class contains useful functions for use with database access.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Utilities.Db.DbUtilities.BuildDateCondition(System.DateTime,System.DateTime,System.String,System.Data.IDbCommand,System.String)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="fieldName"></param>
            <param name="stmt"></param>
            <param name="conj"></param>
            <returns></returns>
        </member>
        <member name="M:Triton.Utilities.Db.DbUtilities.BuildDateCondition2(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Data.IDbCommand,System.String)">
            <summary>
            Builds a SQL condition for use in a "where" clause for the specified
            date range on the specified field.  Either <c>start</c> or <c>end</c>
            may be null.
            </summary>
            <param name="start">The starting date of the date range to build the
            		condition for.  If <c>null</c> only the ending date is used.</param>
            <param name="end">The ending date of the date range to build the
            		condition for.  If <c>null</c> only the starting date is used.</param>
            <param name="fieldName">The name of the field the condition is to be
            		built for.</param>
            <param name="stmt">The SqlCommand the condition is to be used with.</param>
            <param name="conj">The conjuntion, "and" or "or", to include in the condition.</param>
            <returns>A <c>string</c> containing the SQL condition for the given
            		criteria.</returns>
        </member>
        <member name="M:Triton.Utilities.Db.DbUtilities.Close(System.Data.IDbConnection,System.Data.IDbCommand,System.Data.IDataReader)">
            <summary>
            Closes the given database access objects.
            </summary>
            <param name="conn">The <c>IDbConnection</c> to close (null if none).</param>
            <param name="stmt">The <c>IDbCommand</c> to close (null if none).</param>
            <param name="dataReader">The <c>IDataReader</c> to close (null if none).</param>
        </member>
        <member name="T:Triton.Support.Error.DictionaryManager">
            <summary>
            <c>DictionaryManager</c> is a singleton that manages <c>ErrorDictionary</c>s.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Support.Error.DictionaryManager.GetDictionaryManager">
            <summary>
            Returns the singleton instance of the <c>DictionaryManager</c>.
            </summary>
            <returns><c>DictionaryManager</c> instance</returns>
        </member>
        <member name="M:Triton.Support.Error.DictionaryManager.AddDictionary(Triton.Support.Error.ErrorDictionary)">
            <summary>
            Add a error dictionary to the DictionaryManager.
            </summary>
            <param name="dict">The IErrorDictionary to add to the manager.</param>
            <returns><c>True</c> if the add was successful, <c>false</c> if not.</returns>
        </member>
        <member name="M:Triton.Support.Error.DictionaryManager.GetDictionary(System.String)">
            <summary>
            Gets the dictionary with the specified name.
            </summary>
            <param name="dictionaryName">The name of the dictionary to get.</param>
            <returns>The dictionary for the given name, or null if no dictionary
            		exists in the manager with that name.</returns>
        </member>
        <member name="M:Triton.Support.Error.DictionaryManager.Reset">
            <summary>
            Resets the DictionaryManager.  This clears any existing dictionaries from
            from the manager.
            </summary>
        </member>
        <member name="T:Triton.Model.SearchResultBase">
            <summary>
            Base Search Result. Defines base properties for the objects.
            </summary>
            <author>Garun Vagidov</author>
        </member>
        <member name="P:Triton.Model.SearchResultBase.TotalMatches">
            <summary>
            Gets the total number of items that matched the requested search.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResultBase.NumberReturned">
            <summary>
            Gets the number of items returned.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResultBase.FirstItemNumber">
            <summary>
            Gets the record number, relative to all matches, of the first record returned.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResultBase.LastItemNumber">
            <summary>
            Gets the record number, relative to all matches, of the last record returned.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResultBase.NumberRemaining">
            <summary>
            Gets the number of items remaining from the search beyond the page
            of items included here.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResultBase.Filter">
            <summary>
            Gets the filter applied to obtain the results returned.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResultBase.Page">
            <summary>
            Gets the number of the page of paged results.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResultBase.PageSize">
            <summary>
            Gets the size of the current page of results.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResultBase.FirstPageSize">
            <summary>
            Gets the number of items on the first page if different than PageSize.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResultBase.TotalPages">
            <summary>
            Gets the total number of pages required for all results.
            </summary>
        </member>
        <member name="T:Triton.Controller.TransitionSessionManager">
            <summary>
            <c>TransitionSessionManager</c> manages the <c>TransitionSession</c>s.
            It uses the IP address of the request for the session ID.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Controller.TransitionSessionManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Triton.Controller.TransitionSessionManager.AddEvent(System.String,System.Int64,System.String)">
            <summary>
            Adds the given state/event information to the trace of the specified
            session.
            </summary>
            <param name="sessionId">The session ID of the session to add the state/event
            		information to.</param>
            <param name="state">The state the event occurred in.</param>
            <param name="theEvent">The event.</param>
        </member>
        <member name="M:Triton.Controller.TransitionSessionManager.Remove(System.Object)">
            <summary>
            Removes a <c>TransitionSession</c> from the collection.  This is called
            by the time-out timer of the <c>TransitionSession</c> to remove itself
            from the manager.
            </summary>
            <param name="stateInfo">The session ID of the session to remove.</param>
        </member>
        <member name="M:Triton.Controller.TransitionSessionManager.GetTrace(Triton.Controller.TransitionContext)">
            <summary>
            Gets the transition trace for the session associated with the given
            <c>TransitionContext</c>.
            </summary>
            <param name="context">The <c>TransitionContext</c> to get the trace for.</param>
            <returns>A <c>string</c> containing the trace of tranistions for the session
            		associated with the given <c>TransitionContext</c>.</returns>
        </member>
        <member name="P:Triton.Controller.TransitionSessionManager.Item(System.String)">
            <summary>
            Indexer to get a <c>TransitionSession</c> for a given session ID.
            </summary>
        </member>
        <member name="T:Triton.Logic.SetErrorAction">
            <summary>
            Set an error message to the errors list. If error id is not provided 
            the action takes its id as the error id.
            </summary>
            <remarks>
            Action Parameters: <br/>
            <b>ErrorId</b> - the error id to be inserted itno the error collection. <br/>
            <b>ErrorsItemNameOut</b> - the name in Request.Items to put the ErrorList into. <br/>
            Returned events:<br/>
            <b>ok</b> - The error was successfully added/set <br/>
            <b>error</b> - an error occurred while setting the error message<br/>
            </remarks>
        </member>
        <member name="M:Triton.Logic.SetErrorAction.Execute(Triton.Controller.TransitionContext)">
            <summary>Adds and Error to the Errors Collection.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns> event name for the next transisiton
            </returns>
            <exception cref="T:System.ApplicationException">
            </exception>
        </member>
        <member name="P:Triton.Logic.SetErrorAction.ErrorId">
            <summary>
            Gets or sets ErrorId for the Error to be added.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetErrorAction.ErrorIdParamNameIn">
            <summary>
            Gets or sets the name of the request parameter containing
            the error ID for the Error to be added.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetErrorAction.ErrorsItemNameIn">
            <summary>
            Errors collection item name to retrieve.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetErrorAction.ErrorsItemNameOut">
            <summary>
            Errors collection item name to append the errors.
            </summary>
        </member>
        <member name="P:Triton.Logic.SetErrorAction.Index">
            <summary>
            Gets or sets the zero-based index in the errors list
            into which to place the specified error.
            [Optional - if not provided error is added at end of list.]
            </summary>
        </member>
        <member name="T:Triton.Logic.GetObjectPropertyAsItemAction">
            <summary>
            Gets a property of an object in Request.Items and stores the property
            value back to Request.Items.
            </summary>
            <remarks>
            <para>Returned events:</para>
            <c>ok</c> - the property value was successfully retrieved and stored in Request.Items.<br/>
            <c>novalue</c> - there was no value for the property.<br/>
            <c>error</c> - an error occurred while attempting to get the item's property.<br/>
            </remarks>
            <author>Scott Dyke</author>
            <created>3/16/10</created>
        </member>
        <member name="P:Triton.Logic.GetObjectPropertyAsItemAction.ObjectItemNameIn">
            <summary>
            Gets or sets the name of the item in Request.Items to get the
            property from.
            </summary>
        </member>
        <member name="P:Triton.Logic.GetObjectPropertyAsItemAction.ObjectPropertyNameIn">
            <summary>
            Gets or sets the name of the property to get.
            </summary>
        </member>
        <member name="P:Triton.Logic.GetObjectPropertyAsItemAction.ItemNameOut">
            <summary>
            Gets or sets the name in Request.Items into which the
            property value is stored.
            </summary>
        </member>
        <member name="T:Triton.Logic.CompareAction">
            <summary>
            Action to compare the value of a request item to a given value.
            </summary>
            <remarks>
            <para>Returned events:</para>
            <c>equal</c> - the object/property's value is equal to the given value.<br/>
            <c>lessthan</c> - the object/property's value is less than the given value.<br/>
            <c>greaterthan</c> - the object/property's value is greater than the given value.<br/>
            <c>novalue</c> - a property value in the object's property path was null.<br/>
            <c>error</c> - an error occurred while attempting to compare object's value.<br/>
            </remarks>
            <author>Scott Dyke</author>
            <created>7/12/10</created>
        </member>
        <member name="M:Triton.Logic.CompareAction.#ctor">
            <summary>
            Default constructor to set the property defaults.
            </summary>
        </member>
        <member name="P:Triton.Logic.CompareAction.ObjectItemNameIn">
            <summary>
            Gets or sets the name of the item in Request.Items containing the object
            to use to compare against the given value. The object itself is used for
            the comparison if no <c>ObjectPropertyNameIn</c> is provided, or a property
            (or nested property) of the object if <c>ObjectPropertyNameIn</c> is provided.
            </summary>
        </member>
        <member name="P:Triton.Logic.CompareAction.ObjectPropertyNameIn">
            <summary>
            Gets or sets the name of the property of the object identified by the
            <c>ObjectItemNameIn</c> attribute to be compared. The property may be of a
            nested object where <c>ObjectPropertyNameIn</c> would be the path of the
            desired property, for example, PropertyA.PropertyB.PropertyC. If
            <c>ObjectPropertyNameIn</c> is not provided, the object identified by
            <c>ObjectItemNameIn</c> is used directly.
            </summary>
        </member>
        <member name="P:Triton.Logic.CompareAction.CompareValueIn">
            <summary>
            Gets or sets the value to compare the object/property value against.
            This may be the name of a request parameter specified by placing the
            parameter name within [ ], for example, <c>[paramName]</c>.
            </summary>
        </member>
        <member name="P:Triton.Logic.CompareAction.Unwrap">
            <summary>
            Gets or sets the flag to indicate whether or not to "unwrap" an object
            from a <c>SearchResult</c> if encapsulated within one.
            </summary>
        </member>
        <member name="T:Triton.Utilities.StringUtilities">
            <summary>
            This class contains utility functions that are useful for strings.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Utilities.StringUtilities.ReplaceCaseInsensitive(System.String,System.String,System.String)">
            <summary>
            This method does case-insensitive replaces.
            </summary>
            <param name="input"><c>string</c> The string to modify</param>
            <param name="pattern"><c>string</c> The pattern to be replaced</param>
            <param name="replacement"><c>string</c> The replacement string</param>
            <returns><c>string</c> The modified string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Triton.Utilities.StringUtilities.RemoveHtmlTags(System.String)" -->
        <member name="M:Triton.Utilities.StringUtilities.Capitalize(System.String)">
            <summary>
            Capitalizes the first letter of the given string.
            </summary>
            <param name="str">The string to capitalize.</param>
            <returns>The given string with the first letter capitalized.</returns>
        </member>
        <member name="M:Triton.Utilities.StringUtilities.Split(System.String,System.String)">
            <summary>
            This method split string by a string delimiter
            </summary>
            <param name="input"><c>string</c> The string to do split on</param>
            <param name="delimiter"><c>string</c> The string delimiter to do split upon</param>
            <returns><c>string array</c> The parses after split</returns>
        </member>
        <member name="M:Triton.Utilities.StringUtilities.StringToCollection(System.String,System.Char)">
            <summary>
            Builds a name/value pair collection from a string of name/value pairs.
            </summary>
            <remarks>
            The input string to create the collection from is of the form:
            name1=value1[delim]name2=value2[delim]name3=value3...
            </remarks>
            <param name="theString">The string to generate the name/value pair collection from.</param>
            <param name="delim">The delimiter separating the name/value pairs in the input string.</param>
            <returns>A <b>NameValueCollection</b> containing the name/value pairs defined in the
            		input string.</returns>
        </member>
        <member name="M:Triton.Utilities.Db.DbExtensions.GetDebugInfo(System.Data.SqlClient.SqlCommand)">
            <summary>
            Gets the command text and lists all the parameters and its values.
            </summary>
            <param name="command">The command to get the debug info.</param>
            <returns>string representation of the command contents.</returns>
        </member>
        <member name="T:Triton.Support.Error.NoDictionaryException">
            <summary>
            
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Model.Dao.MsPublishDao">
            <summary>
            <b>MsPublishDao</b> implements the <c>IPublishDao</c> for a SQLServer database.
            It manages database interactions for the page publishing system.
            </summary>
        </member>
        <member name="F:Triton.Model.Dao.MsPublishDao.CONNECTION_SETTING">
            <summary>
            The name of the configuration setting within controllerSettings/publishing/settings for the
            name of the database connection.
            </summary>
        </member>
        <member name="F:Triton.Model.Dao.MsPublishDao.TABLE_NAME">
            <summary>
            The name of the table the page publish information is stored to/retrieved from.
            </summary>
        </member>
        <member name="M:Triton.Model.Dao.MsPublishDao.GetPublishInfo">
            <summary>
            Reads the published page data from the database.
            </summary>
            <remarks>
            GetPublishInfo returns the published page data in an <c>XmlDocument</c> in the
            following format:
            <pre>
            	<PublishedPages>
            		<Page startState="" publishedState="" key="" event="" path="" lastPublished="" hits="" />
            		...
            	</PublishedPages>
            </pre>
            </remarks>
            <returns>An <b>XmlDocument</b> containing the published page data
            		retrieved from the database.</returns>
        </member>
        <member name="M:Triton.Model.Dao.MsPublishDao.SavePublishInfo(Triton.Controller.Publish.PublishedPageCollection)">
            <summary>
            Saves the published page collection, represented as XML, to the database.
            </summary>
            <param name="doc">An XML document containing the published page collection
            		to save to the database.</param>
        </member>
        <member name="T:Triton.Controller.Utilities.LanguageUtilities">
            <summary>
            <c>LanguageUtilities</c> is a utility class to support site langauge usage.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="T:Triton.Controller.Request.MvcHttpRequest">
            <summary>
            <b>MvcHttpRequest</b> is an <i>adaptor</i> class that adapts a .net request
            (represented by a HttpContext) to the MvcRequest interface.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.Request.MvcHttpRequest.httpContext">
            <summary>
            The underlying .net request HttpContext this 
            </summary>
        </member>
        <member name="F:Triton.Controller.Request.MvcHttpRequest.localParams">
            <summary>
            The local collection of parameters.
            </summary>
        </member>
        <member name="F:Triton.Controller.Request.MvcHttpRequest.postedFiles">
            <summary>
            The collection of client uploaded files.
            </summary>
        </member>
        <member name="F:Triton.Controller.Request.MvcHttpRequest.useLocal">
            <summary>
            Flag to indicate whether or not we should use the local collection,
            or the underlying HttpContext collection.
            </summary>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.#ctor(System.Web.HttpContext)">
            <summary>
            Constructs a new MvcHttpRequest from the given HttpContext.
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.GetItem``1(System.Object)">
            <summary>
             Retrieves the specific Type of object from the Items Dictionary.
            </summary>
            <param name="key">Object key.</param>
            <typeparam name="T">Type of object to return.</typeparam>
            <returns>The corresponding key value.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.GetCookie(System.String)">
            <summary>
            Returns a <b>MvcCookie</b> from the request with the given name, 
            or null if no cookie with that name exists.
            </summary>
            <param name="name">The name of the cookie to get.</param>
            <returns>A <b>MvcCookie</b> with the given name, or null if no 
            	cookie with that name exists.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.GetResponseCookie(System.String)">
            <summary>
            Returns a <b>MvcCookie</b> from the response with the given name, 
            or null if no cookie with that name exists.
            </summary>
            <param name="name">The name of the response cookie to get.</param>
            <returns>A <b>MvcCookie</b> with the given name, or null if no 
            	cookie with that name exists in the response.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.SetResponseCookie(Triton.Controller.Request.MvcCookie)">
            <summary>
            Sets a <b>MvcCookie</b> in the response.  If the cookie already
            exists, its information is updated, if not, it is created.
            </summary>
            <param name="cookie">The <b>MvcCookie</b> to set in the response.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.WriteResponse(System.String,System.Boolean)">
            <summary>
            Writes the given content to the request's response.
            </summary>
            <param name="content">The content to write to the response.</param>
            <param name="endResponse"><b>True</b> if the response is to be ended,
            	<b>false</b> if not.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.Execute(System.String)">
            <summary>
            Executes the given URL and returns the content returned by the URL.
            </summary>
            <param name="url">The URL to execute.</param>
            <returns>The content returned from the given URL.</returns>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.Transfer(System.String)">
            <summary>
            Transfers processing of the request to the given URL.
            </summary>
            <param name="url">The URL to transfer processing to.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.Redirect(System.String)">
            <summary>
            Redirects a client to a new URL and specifies the new URL.
            </summary>
            <param name="url">The target location.</param>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.ValidateInput">
            <summary>
            Validates data submitted by a client and raises an exception 
            if potentially dangerous data is present.
            </summary>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpRequest.MakeLocalCollection">
            <summary>
            Builds the local collection of parameters.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.Item(System.String)">
            <summary>
            Indexer for a <b>MvcRequest</b>.  Gets or Sets the parameter 
            with the given name.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.Params">
            <summary>
            Gets a collection of the parameters of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.Items">
            <summary>
            Gets a collection of objects used internally for the processing of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.Version">
            <summary>
            Gets the version of the target "page" for rendering the response.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.IP">
            <summary>
            Gets the IP address of the origin of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.UserName">
            <summary>
            Gets the logon user of the client request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.Files">
            <summary>
            Gets the collection of client-uploaded files (Multipart MIME format).
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.Url">
            <summary>
            Gets the URL of the request.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.RawUrl">
            <summary>
            Gets the RawUrl of the request (url before any rewriting or redirect)
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpRequest.LocalParams">
            <summary>
            Gets the local collection of parameters.
            </summary>
        </member>
        <member name="T:Triton.Controller.Publish.PublishRecord">
            <summary>
            <b>PublishRecord</b> contains the information about a published piece of content.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.Publish.PublishRecord.startStateId">
            <summary>
            The state ID of the start state.
            </summary>
        </member>
        <member name="T:Triton.Logic.ResetSingletonAction">
            <summary>
            Resets a singleton, forcing it to re-initialize on its next usage.
            </summary>
            <remarks>
            This action is designed for SingletonBase singletons but will also work
            with other singletons that meet the following criteria:
            <ol>
            <li>Must have a static bool Exists property that indicates if the instance of
            	the singleton has be instantiated.</li>
            <li>Must have a reset method to force re-initialization of the singleton.</li>
            </ol>
            <para>Returned events:</para>
            <c>ok</c> - the singleton was successfully reset.<br/>
            <c>error</c> - an error occurred while attempting to reset the singleton.<br/>
            </remarks>
            <author>Scott Dyke</author>
            <created>11/30/10</created>
        </member>
        <member name="P:Triton.Logic.ResetSingletonAction.SingletonNameIn">
            <summary>
            Gets or sets the fully qualified name(s) of the singleton(s) to reset.
            </summary>
        </member>
        <member name="P:Triton.Logic.ResetSingletonAction.SingletonNameParamIn">
            <summary>
            Gets or sets the name of the request parameter containing the fully
            qualified name(s) of the singleton(s) to reset.
            </summary>
        </member>
        <member name="P:Triton.Logic.ResetSingletonAction.ResetMethodNameIn">
            <summary>
            Gets or sets the name of the singleton's reset method.
            </summary>
        </member>
        <member name="T:Triton.Logic.EqualAction">
            <summary>
            Action to compare the values of two request parameters or items.
            </summary>
            <remarks>
            <para>Returned events:</para>
            <c>yes</c> - the two objects given to compare are equal.<br/>
            <c>no</c> - the two objects given to compare are not equal.<br/>
            <c>error</c> - an error occurred while attempting to compare the objects.<br/>
            </remarks>
            <author>Scott Dyke</author>
            <created>6/30/10</created>
        </member>
        <member name="P:Triton.Logic.EqualAction.ParamName1In">
            <summary>
            Gets or sets the name of the first request parameter to compare.
            </summary>
        </member>
        <member name="P:Triton.Logic.EqualAction.ParamName2In">
            <summary>
            Gets or sets the name of the second request parameter to compare.
            </summary>
        </member>
        <member name="P:Triton.Logic.EqualAction.ItemName1In">
            <summary>
            Gets or sets the name of the first request item to compare.
            </summary>
        </member>
        <member name="P:Triton.Logic.EqualAction.ItemName2In">
            <summary>
            Gets or sets the name of the second request item to compare.
            </summary>
        </member>
        <member name="P:Triton.Logic.EqualAction.CompareValueIn">
            <summary>
            Gets or sets the value to compare to.
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.GetIdNameEntryName">
            <summary>
            The <b>GetIdNameEntryName</b> delegate defines a method to get
            the name of an entry in the collection.
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.GetIdNameEntryId">
            <summary>
            The <b>GetIdNameEntryId</b> delegate defines a method to get
            the ID of an entry in the collection.
            </summary>
        </member>
        <member name="T:Triton.Support.Collections.IdNameCollection">
            <summary>
            <b>IdNameCollection</b> is a collection of objects that can be indexed by
            <i>ID</i> and <i>name</i>.  The ID and name used by the collection are
            identified by the GetIdNameEntryName and GetIdNameEntryId delegates specified
            when the collection is instantiated.
            </summary>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Support.Collections.IdNameCollection.idGetter">
            <summary>
            The GetIdNameEntryId to get the ID of an entry
            </summary>
        </member>
        <member name="F:Triton.Support.Collections.IdNameCollection.idHash">
            <summary>
            Hashtable of items keyed on ID.
            </summary>
        </member>
        <member name="F:Triton.Support.Collections.IdNameCollection.nameGetter">
            <summary>
            The GetIdNameEntryName to get the name of an entry
            </summary>
        </member>
        <member name="F:Triton.Support.Collections.IdNameCollection.nameHash">
            <summary>
            Hashtable of items keyed on name.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.IdNameCollection.#ctor(Triton.Support.Collections.GetIdNameEntryId,Triton.Support.Collections.GetIdNameEntryName)">
            <summary>
            Constructs a new <b>IdNameCollection</b> with the given delegates for getting
            an entry's ID and name.
            </summary>
            <param name="idGetter">The <b>GetIdNameEntryId</b> delegate to get IDs for collection entries.</param>
            <param name="nameGetter">The <b>GetIdNameEntryName</b> delegate to get names for collection entries.</param>
        </member>
        <member name="M:Triton.Support.Collections.IdNameCollection.Add(System.Object)">
            <summary>
            Adds a new entry to the collection.
            </summary>
            <param name="entry">The <c>object</c> to add to the collection.</param>
        </member>
        <member name="P:Triton.Support.Collections.IdNameCollection.Item(System.Int64)">
            <summary>
            Indexer to get an entry based on its id.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.IdNameCollection.Item(System.String)">
            <summary>
            Indexer to get an entry based on its name.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.IdNameCollection.Count">
            <summary>
            Gets the number of entries contained in the <b>IdNameCollection</b>.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.IdNameCollection.Ids">
            <summary>
            Gets the ids for all the attributes in the <b>IdNameCollection</b>.
            </summary>
        </member>
        <member name="P:Triton.Support.Collections.IdNameCollection.Names">
            <summary>
            Gets the names for all the attributes in the <b>IdNameCollection</b>.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.IdNameCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Triton.Support.Collections.IdNameCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; 
            		<b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:Triton.Support.Collections.IdNameCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Triton.Model.SearchResult`1">
            <summary>
            A parameterized SearchResult to return type-specific results from a search of a
            data source.
            </summary>
            <typeparam name="T">The <b>Type</b> of the objects to be returned in the SearchResult.</typeparam>
            <author>Scott Dyke</author>
        </member>
        <member name="M:Triton.Model.SearchResult`1.#ctor(`0[])">
            <summary>
            A parameterized SearchResult to return type-specific 
            results from a search of a data source.
            </summary>
            <param name="items">Results from the search of the data source.</param>
        </member>
        <member name="M:Triton.Model.SearchResult`1.#ctor(`0[],System.Object)">
            <summary>
            A parameterized SearchResult to return type-specific 
            results from a search of a data source.
            </summary>
            <param name="items">Results from the search of the data source.</param>
            <param name="filter">The filter used to populate the search.</param>
        </member>
        <member name="M:Triton.Model.SearchResult`1.#ctor(`0[],System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            A parameterized SearchResult to return type-specific 
            results from a search of a data source.
            </summary>
            <param name="items">Results from the search of the data source.</param>
            <param name="filter">The filter used to populate the search.</param>
            <param name="page">The current zero-indexed page.</param>
            <param name="pageSize">The number of items returned for a page.</param>
            <param name="totalMatches">Total number of matches for the search.</param>
        </member>
        <member name="M:Triton.Model.SearchResult`1.#ctor(`0[],System.Object,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A parameterized SearchResult to return type-specific 
            results from a search of a data source.
            </summary>
            <param name="items">Results from the search of the data source.</param>
            <param name="filter">The filter used to populate the search.</param>
            <param name="page">The current zero-indexed page.</param>
            <param name="pageSize">The number of items returned for a page.</param>
            <param name="totalMatches">Total number of matches for the search.</param>
            <param name="firstPageSize">The number of items returned for the first page.</param>
        </member>
        <member name="M:Triton.Model.SearchResult`1.CalculatePaging">
            <summary>
            Calculates the index of the first and last record, the number of records remaining,
            and the total number of pages needed to display all records based on the given values
            for the data to be paged.
            </summary>
        </member>
        <member name="P:Triton.Model.SearchResult`1.Items">
            <summary>
            Gets the items returned in as a result of the search.
            </summary>
        </member>
        <member name="T:Triton.Controller.Request.MvcHttpPostedFile">
            <summary>
            <b>MvcHttpPostedFile</b> provides a way to access individual files that 
            have been uploaded by a client.  This is an Adapter class for HttpPostedFile.
            </summary>
            <remarks>
            The <c>MvcPostedFileCollection</c> class provides access to all the files uploaded 
            from a client as a file collection. <b>MvcHttpPostedFile</b> provides properties and 
            methods to get information on an individual file and to read and save the 
            file. Files are uploaded in MIME multipart/form-data format and are buffered 
            in server memory until explicitly saved to disk.
            </remarks>
            <author>Scott Dyke</author>
        </member>
        <member name="F:Triton.Controller.Request.MvcHttpPostedFile.baseFile">
            <summary>
            Reference to the underlying HttpPostedFile object.
            </summary>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpPostedFile.#ctor(System.Web.HttpPostedFile)">
            <summary>
            Constructs a new <b>MvcHttpPostedFile</b> adapter for the given <b>HttpPostedFile</b>.
            </summary>
            <param name="httpFile"></param>
        </member>
        <member name="M:Triton.Controller.Request.MvcHttpPostedFile.SaveAs(System.String)">
            <summary>
            Saves the contents of an uploaded file.
            </summary>
            <param name="fileName">The name of the saved file.</param>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpPostedFile.Length">
            <summary>
            Gets the size in bytes of an uploaded file.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpPostedFile.Name">
            <summary>
            Gets the fully-qualified name of the file on the client's computer 
            (for example "C:\MyFiles\Test.txt").
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpPostedFile.Type">
            <summary>
            Gets the MIME content type of a file sent by a client.
            </summary>
        </member>
        <member name="P:Triton.Controller.Request.MvcHttpPostedFile.InputStream">
            <summary>
            Gets a <c>Stream</c> object which points to an uploaded file to prepare 
            for reading the contents of the file.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Triton.Controller.Publish.PublisherRuleFactory" -->
        <member name="M:Triton.Controller.Publish.PublisherRuleFactory.Make(System.String,System.String)">
            <summary>
            Creates the <c>IPublisherRule</c> for the given name and type.
            </summary>
            <param name="ruleName">The name of the rule.</param>
            <param name="typeClass">The type of the class.</param>
            <returns></returns>
        </member>
    </members>
</doc>
