<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Triton.Modules.Membership</name>
    </assembly>
    <members>
        <member name="T:Triton.Membership.Model.Dao.AccountFilter">
            <summary>
            Defines the AccountFilter used to retrieve Accounts.
            </summary>
        </member>
        <member name="M:Triton.Membership.Model.Dao.AccountFilter.#ctor">
            <summary>
            Create a new AccountFilter.
            </summary>
        </member>
        <member name="P:Triton.Membership.Model.Dao.AccountFilter.Attributes">
            <summary>
            Attributes to filter the results by.
            </summary>
        </member>
        <member name="P:Triton.Membership.Model.Dao.AccountFilter.Status">
            <summary>
            Get and set the status id for the account filtering.
            </summary>
        </member>
        <member name="P:Triton.Membership.Model.Dao.AccountFilter.Ids">
            <summary>
            Get and set the account ids to retrieve.
            </summary>
        </member>
        <member name="P:Triton.Membership.Model.Dao.AccountFilter.Usernames">
            <summary>
            Get the user names to retrieve.
            </summary>
        </member>
        <member name="P:Triton.Membership.Model.Dao.AccountFilter.Roles">
            <summary>
            The Roles to filter the results by.
            </summary>
        </member>
        <member name="P:Triton.Membership.Model.Dao.AccountFilter.Name">
            <summary>
             The Person.Name to Filter results by
            </summary>
        </member>
        <member name="T:Triton.Membership.Logic.IsLoggedInAction">
            <remarks>
            Returned events:<br/>
            <b>yes</b> - the account/user with the given username is logged in.<br/>
            <b>no</b> - the account/user with the given username is not logged in.<br/>
            </remarks>
        </member>
        <member name="T:Triton.Membership.Model.Dao.IAttributeTypeDao">
            <summary>
            Defines the contract of how AttributeType is retrieved, persisted and deleted.
            </summary>
        </member>
        <member name="M:Triton.Membership.Model.Dao.IAttributeTypeDao.Get(System.Int32)">
            <summary>
            Gets the AttributeType by id.
            </summary>
            <param name="id">Id of the AttributeType to retrieve.</param>
            <returns>AttibuteType object.</returns>
        </member>
        <member name="M:Triton.Membership.Model.Dao.IAttributeTypeDao.Get(Triton.Membership.Model.AttributeType)">
            <summary>
            Gets the list of attribute types by example.
            </summary>
            <param name="example">Example object of AttributeType.</param>
            <returns>List of AttributeType matching the example.</returns>
        </member>
        <member name="M:Triton.Membership.Model.Dao.IAttributeTypeDao.Save(Triton.Membership.Model.AttributeType)">
            <summary>
            Saves the AttributeType.
            </summary>
            <param name="type">AttributeType object to save.</param>
        </member>
        <member name="M:Triton.Membership.Model.Dao.IAttributeTypeDao.Save(System.Collections.Generic.IList{Triton.Membership.Model.AttributeType})">
            <summary>
            Saves list of AttributeTypes.
            </summary>
            <param name="types">List of AttributeTypes to save.</param>
        </member>
        <member name="M:Triton.Membership.Model.Dao.IAttributeTypeDao.Delete(Triton.Membership.Model.AttributeType)">
            <summary>
            Deletes the AttributeType.
            </summary>
            <param name="type">AttributeType object to delete.</param>
        </member>
        <member name="M:Triton.Membership.Model.Dao.IAttributeTypeDao.Get(System.String)">
            <summary>
            Gets the AttributeType by the code value.
            </summary>
            <param name="code">Code value of the AttributeType.</param>
            <returns>AttributeType object associated with the code.</returns>
        </member>
        <member name="M:Triton.Membership.Model.Dao.IAttributeTypeDao.GetFilter">
            <summary>
            Get the filter.
            </summary>
        </member>
        <member name="M:Triton.Membership.Model.Dao.IAttributeTypeDao.Find(Triton.Membership.Model.Dao.AttributeTypeFilter)">
            <summary>
            Find attribute types by filter
            </summary>
            <param name="filter">Filter with the criteria to search</param>
            <returns>SearchResult of AttributeTypes</returns>
        </member>
        <member name="M:Triton.Membership.Model.Name.ToString(System.String)">
            <summary>
            Formats the Name.
            the default format is prefix{p} first{f} middle{m} last{l} suffix{s}.
            </summary>
            <param name="format">
            the following formatting directives can be used to create a different result
            example ToString("{l}, {f} {m}") ==&gt; Smith, Jim R.
            <b>{p}</b> the Name.PrefixCode value
            <b>{f}</b> the Name.First value
            <b>{m}</b> the Name.Middle value
            <b>{l}</b> the Name.Last value
            <b>{s}</b> the Name.SuffixCode value
            </param>
            <returns>
            The formatted string of the name.
            </returns>
        </member>
        <member name="M:Triton.Membership.Model.Name.ToString">
            <summary> Formats the Name in the default format (prefix first middle last suffix).
            </summary>
            <returns> The formatted string of the name.
            </returns>
        </member>
        <member name="F:Triton.Membership.Support.Request.ParameterNames.Account.ID">
            <summary>
            Deprecated. Please use the Field or Filter parameter names.
            </summary>
        </member>
        <member name="F:Triton.Membership.Support.Request.ParameterNames.Account.PASSWORD">
            <summary>
            Deprecated. Please use the Field or Filter parameter names.
            </summary>
        </member>
        <member name="F:Triton.Membership.Support.Request.ParameterNames.Account.USERNAME">
            <summary>
            Deprecated. Please use the Field or Filter parameter names.
            </summary>
        </member>
        <member name="F:Triton.Membership.Support.Request.ParameterNames.Account.ATTRIBUTE_VALUE">
            <summary>
            Deprecated. Please use the Field or Filter parameter names.
            </summary>
        </member>
        <member name="F:Triton.Membership.Support.Request.ParameterNames.Account.AUTHENTICATED_ID">
            <summary>
            Deprecated. Please use the Field or Filter parameter names.
            </summary>
        </member>
        <member name="F:Triton.Membership.Support.Request.ParameterNames.Account.ATTRIBUTE_IS_CSV">
            <summary>
            Deprecated. Please use the Field or Filter parameter names.
            </summary>
        </member>
        <member name="P:Triton.Membership.Logic.CreateAccountAction.AccountItemNameOut">
            <summary>
            Overloaded AccountsItemNameOut so that the state's attribute can match the action "Account".
            </summary>
        </member>
        <member name="M:Triton.Membership.Logic.SaveAccountAttributeValueAction.ProcessValue(System.String,System.String)">
            <summary>
            Updates the value of the attribute. Toggles the value if attribute is of type CSV.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Triton.Membership.Logic.SaveAccountAttributeValueAction.CreateCsvValue(System.Collections.Generic.List{System.String})">
            <summary>
            Compile the delineated value of the attribute
            </summary>
            <param name="oldValues"></param>
            <returns></returns>
        </member>
        <member name="T:Triton.Membership.Model.Role">
            <summary>
            
            </summary>
        </member>
        <member name="M:Triton.Membership.Support.EncryptionManager.#ctor">
            <summary>
            Temporary Encryption Manager.
            </summary>
        </member>
        <member name="T:Triton.Membership.Logic.IsMemberOfAction">
            <remarks>
            Returned events:<br/>
            <b>yes</b> - the account/user with the given username is logged in.<br/>
            <b>no</b> - the account/user with the given username is not logged in.<br/>
            </remarks>
        </member>
        <member name="P:Triton.Membership.Logic.IsMemberOfAction.Roles">
            <summary>
            Gets or sets the role names that are to be used to test against.
            </summary>
        </member>
        <member name="T:Triton.Membership.Support.Request.Deserialize">
            <summary>
            Helper class to take parameters from the request and generate objects to save/update.
            For use with Triton.Membership module.
            </summary>
        </member>
        <member name="M:Triton.Membership.Support.Request.Deserialize.CreateName(Triton.Controller.Request.MvcRequest)">
            <summary>
            Creates a new <c>Name</c> from the request.
            </summary>
            <param name="request">Request to create the Name from.</param>
            <returns>A populated Name object.</returns>
        </member>
        <member name="M:Triton.Membership.Support.Request.Deserialize.Populate(Triton.Controller.Request.MvcRequest,Triton.Membership.Model.Name)">
            <summary>
            Populates the <c>Name</c> with the values from the request.
            </summary>
            <param name="request">Request to populate the Name from.</param>
            <param name="name">Name to populate</param>
            <returns>Populated from the request Name object.</returns>
        </member>
        <member name="M:Triton.Membership.Support.Request.Deserialize.CreateRole(Triton.Controller.Request.MvcRequest)">
            <summary>
            Creates a new <c>Role</c> from the request.
            </summary>
            <param name="request">Request to create the Role from.</param>
            <returns>A populated Role object.</returns>
        </member>
        <member name="M:Triton.Membership.Support.Request.Deserialize.Populate(Triton.Controller.Request.MvcRequest,Triton.Membership.Model.Role)">
            <summary>
            Populates the <c>Role</c> with the values from the request.
            </summary>
            <param name="request">Request to populate the Role from.</param>
            <param name="role">Role to populate</param>
            <returns>Populated from the request Role object.</returns>
        </member>
        <member name="M:Triton.Membership.Support.Request.Deserialize.CreateAttributeType(Triton.Controller.Request.MvcRequest)">
            <summary>
            Creates a new <c>AttributeType</c> from the request.
            </summary>
            <param name="request">Request to create the AttributeType from.</param>
            <returns>A populated AttributeType object.</returns>
        </member>
        <member name="M:Triton.Membership.Support.Request.Deserialize.Populate(Triton.Controller.Request.MvcRequest,Triton.Membership.Model.AttributeType)">
            <summary>
            Populates the <c>AttributeType</c> with the values from the request.
            </summary>
            <param name="request">Request to populate the AttributeType from.</param>
            <param name="attributeType">AttributeType to populate</param>
            <returns>Populated from the request AttributeType object.</returns>
        </member>
        <member name="T:Triton.Membership.Model.Dao.NhAccountStatusDao">
            <summary>
            </summary>
        </member>
    </members>
</doc>
